#/daemon/letter.c
__Letter "I'm working this is two objects. The main _mail.c would be thecommand hub. It would take in and control the information. Thatinformation would then be stored into a player_mail.c object. Thisway the only mail folders that are in memory at any given time arethose that are being referanced. I was planning on doing it thisway cause some mailboxes will get QUITE large and cumbersome.That is the main reason that individual mails were read/wrote toindividual files to begin with. Mappings suck up clockspeed andmemory. I have no problem making it so that the information isstored this way tho.My question is what object should control the removal of the player_mail.c objects for each person. That object, _mail.c ,or user.c's heart_beat.Basically the system will work like this so far;    1) mail is generated in _mail.c    2) A player_mail.c is cloned for each of the recipiants.    3) Once _mail.c closes out the letters for any given person       . The letter(s) are sent to the player_mail.c for that person.       It does it this way in case there are more than one letter being       sent to the same person at the same time... It waits until ALL       of that person's letters are ready to go.     4) Player_mail.c places the mail(s) in the inbox of the person.The question is what should have control of cleaning up theplayer_mail.c objects."
__Undeleted ({"ironman","nulvect",})
