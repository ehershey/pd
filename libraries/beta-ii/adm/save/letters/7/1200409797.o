#/daemon/letter.c
__Letter "I got another idea bro. Wanna get your input on it before i godeveloping it. Actually there are two idea.Idea #1 --- Floating point PK systemThis system would be fairly simple. I would insert 2 functions into/std/room.c to set and query the PK setting for the room. The\"/std/living/combat.c\"->ok_to_kill() would then be modified to usethe query in /std/room.c to see if the PK is allowed.This kind of system would permit the builders to have a saferoom inan full PK area. It would also allow for \"dark alleys\" in towns.The whole idea is that the PK system would be settable room to roominstead of being based on what directory the files are in.       1) THe current system would be used to tell what the room's          \"default\" setting is.       2) My system would be usable by commands to ALTER the pk setting          on the room. Like a priest offering sanctuary. or a shaman           doing a \"wardance\".       3) If the builder sets a PK status other than the directories          placement, the setting would override the current system.=====================================================================Idea #2 --- New bags and packsI was thinking of redesigning the containers that a player crams thingsinto. The container used for living.c and room.c I would leave as is.Reason for this is to reduce the lag. Most of the loaded objects areredundant copies of objects that get stored into containers until soldor buried. I therefore wanna develope a new container system that woulddo the following;       1) When an object is put into the container....            A) The object is placed onto a mapping inside the container               pathfile, weight, count, affects would be indexed.               contents[filename]==[count],[weight],[etc]            B) Total \"weight\" for the \"objects\" would be totalled to               show the incumberance of the bag.       1) When an object is removed from the container....            A) The object is reduced in count on the mapping and the               object reloaded. If the count is reduced to 0, the               object's entry is removed.This kind of system would greatly reduce the amount of loaded objectsthat the mud has to handle. As a result, It would lower the neededmemory needs and reduce lag.=====================================================================Please reply to these two idea when you can. I would like to begindeveloping them asap for PD.Ironman"
__Undeleted ({"luna","nulvect","whit","stormbringer","daos",})
