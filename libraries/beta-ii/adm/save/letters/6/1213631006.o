#/daemon/letter.c
__Letter "Ok i'm at a crossroads on designing this mail system.How to clean_up the player mail objects.I was debating about one of the following;    1) Heart_beats that countdown to destruction.    2) Using the user object's heartbeat to control destruction.       meaning it can look at a counter function inside the player       mail object.    3) Making the objects destruct/reload each time they're used.       This would be hard on the system and cause lag tho due to       reloading objects all the time.    4) Letting the _mail.c countdown for each person activated.       It would then call the player_mail_objects in memory and       call it's remove() functions. It makes the most sense to       me to go with this option. This way only one central object       would need to keep track of who is actively using the mail       object at any given time.    5) Install reset() functions into the objects in conjunction       with remove() functions to control the removal and cleanup.I want you opinion as to which one would be the least taxing on theclock_speeds of the server.Also i want you opinion on something else. Would you want a maximumfolder size limit. Meaning as a person moves up in levels, they canstore more letters and get more folders. We could always makeexceptions to this rule for guild leaders or others that NEED morespace (like people that are staff on builders but not the main)Thinking along these spaces tenatively;     1) newbie  ..... 25 letters, 5 folders     2) Hm........... 50 letters, 10 folders     3) elite ...... 100 letters, 15 folders     4) legend ..... 200 letters, 25 folders     5) guild leader.+50 letters,+25 folders     6) immortals ... no limits (builders' staff included)mail me back as to which option you would want me to go with"
__Undeleted ({"ironman","nulvect","daos","stormbringer",})
