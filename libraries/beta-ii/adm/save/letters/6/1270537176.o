#/daemon/letter.c
__Letter "-----Original letter sent by Nightshade to Daos Tue Nov  7 07:33:01 2006:-----The two functions are similar, but behave slightly differently according to use.  There is nothing wrong with either one when they are used appropriately.  call_out() has a certain amount of overhead associated with it that heart_beat() does not.  Essentially, it's the cost of storing the time called, time to execute, and testing of the time each heart_beat().  heart_beat() on the other hand, does not have this overhead, but is called every 2 seconds.  So.  Let's say you have an item that sends a message a few seconds after being wielded.  You'd use a call_out(), since that only needs to be run once.  If the item sends a message randomly every 10-20 seconds, you'll want to put that in heart_beat().  If you would like a set of rules to follow:  use call_out() by default.  If your object will have a call_out() pending more than 1/3rd the time that the object is in memory, use heart_beat() instead."
__Undeleted ({"drackmire",})
