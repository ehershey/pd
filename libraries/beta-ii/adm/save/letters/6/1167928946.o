#/daemon/letter.c
__Letter "-----Original letter sent by Ironman to Ironman Mon Dec 25 10:41:25 2006:-----I have finished the rewiring of the builders security systems. Thismail is to outline the overall modifications that i have done and howthe builders can implement them. The following two files control thebulk of the system;/std/room/wizard_room.c/adm/simul_efun/security_screen.cThe WORKROOM inherit turns the builder's room into the control hubfor the system. It has functions to control reading and writting tothe builders files. The builder may also control whom can get informationfrom their objects or even walk around their areas without theirpermissions :P There are 12 functions that control this system asfollows;allow_guest_access()   clear_guest_access()   query_guest_access()allow_scan_access()    clear_scan_access()    query_scan_access()allow_read_access()    clear_read_access()    query_read_access()allow_write_access()   clear_write_access()   query_write_access()Anyone with Write access will be given all other forms of access.Anyone with read access will be given scan and guest access.Those with Scan or guest access will not automatically be giventhe other.The allow_ functions will grant the access to those persons or persongiven into the function. The clear_ functions turn the storage arrayback to 0.The queries have two modes. No arguement will return all persons grantedthat level of access. Passing the person's name in a string will returna 1 or 0. A 0 is returned if the array is empty.======================================================================The actual tests are contained in the simul_efun file security_screen.cvarargs int security_screen_scan(mixed target, object guest);varargs int security_screen_read(mixed target, object guest);varargs int security_screen_write(mixed target, object guest);varargs int security_screen_guest(mixed target, object guest);varargs int builder_move_test(mixed target, object passenger);The \"target\" is the file they are trying to access and will takein either an object or the filename in a string. The \"guest\" isthe builder.========================================================================I have also modified the Party system to control the use of call, snoop,and allow a builder to take someone on a walkthru of their areas :)The builders can NOT use call or snoop on a fellow builder UNLESS theyare in a party with them. Movement around their areas can also be grantedwith the guest_access set of functions.=======================================================================This grants the builder a much tighter reign on their projects, safeguardsany and all quest-info present in the areas. It even will let buildersform teams and code together if they wish it :) All they have to do isgrant write access for eachother in their workrooms now.Ironman"
__Undeleted ({"nightshade",})
