#/daemon/letter.c
__Letter "problems with pillar.ccheck_gem() sets env to environment(tp) when tp could be nullI would recommend a more specific error message for the black diamond's failure message, falling out of the hole makes it seem like it's simply not the right hole (round peg in a square hole?)I think receive_objects() needs to return 1 in order to work correctly. Instead of doing a call_out() for the gem checking, why not just call it right there and have it return 0 with an error message if it doesn't fit?along with the rest of the door information, I recommend doing:set_door_func(\"gembarrier\", \"open\", (:open_door_deny:));int open_door_deny() {  write(\"You do not have the magical capabilities to remove the barrier.\");  return 0;}That way you also don't have to do set_locked, which will print a stupid error message when you try to open the door, telling you that the magical barrier is locked.It seems like it's very easy for this object to trap all the people in the room with it, as there's no way to remove the barrier and retrieve the crystals from the pillars, and thus raise the magical barriers.The way you have the door system working right now, each pillar only covers the exits in that room with the barrier, so it's still possible for others to enter the room from the outside. Even though all rooms use the same door ID, they won't even check that door for its open/closed status if that door isn't already blocking the exit.suggestion:put the following code in each room, at the end of create():  foreach (string ex in env->query_exits())    env->cover_exit_with_door(ex, \"gembarrier\");  set_door_name(\"gembarrier\", \"magical barrier\");  set_door_func(\"gembarrier\", \"open\", (:tog_door_deny:));  set_door_func(\"gembarrier\", \"close\", (: (return 0) :));  set_door_env_msg(\"gembarrier\", \"open\", \"The magical forcefield is lifted\");  set_door_env_msg(\"gembarrier\", \"close\", \"A magical forcefield comes down over the room\");and then in ogre75 only:  set_closed(\"gembarrier\", 0);That way each room will automatically have that door in them, and when the door is opened or closed by the pillars, all the rooms will be affected, and messaged. You're also going to want to add that door to the northern exit of ogre86.pillar.c doesn't seem to actually check the gem's color when you put a gem in it. It checks if the pillar's color is black, but it doesn't make sure that this color pillar is the same as the gem that you're trying to stuff into it.I think the gem should store player data in whoplaced a string, just in case the winner happens to disappear by the time the gem disappears. As such, do_pillar_win() should check to make sure that find_player(winner) exists. for the do_prison_release_code, you should be able to just  set_closed(\"gembarrier\", 0);and it should open up all four barriers, as well as printing that message above.Do you have any more ideas for that mostly useless but awesome ogre king trinket/bauble?"
__Undeleted ({"nulvect",})
