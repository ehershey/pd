#/adm/daemon/bboard_d.c
posts ({(["message":"I just found this out, and wanted to share it since it's areally useful trick.When you use a switch() statement, your cases can have ranges.switch (5) {  case 1..3: return 1;  case 4..6: return 2;  default: return 3;}The above will return 2... much nicer than multiple if statements.","size":295,"title":"case","date":1179979381,"owner":"nulvect",]),(["message":"is there a list of the different keys that you can set with set_properties()? I realize that you can add any key that you want to set_properties() (or at least I assume tat it works that way), but I'd like to have a current list o the ones that are being used around the MUD. In particular, I'm looking for the are-specific properties, like \"forest\" and \"city.\" In particular in particular, I'm trying to decide what properties to use in the dragonlands. I'm assuming \"mountain\", but I think there may be more specific ones that I may want to use, like \"cave\" or \"valley\" in specific areas.","size":591,"title":"list of properties?","date":1217449294,"owner":"pyro",]),(["message":"This is taken directly off of builders:      \"forest\"  : 1,     Sets the room to a forest region      \"beach\"   : 1,     Sets the room to a beach region      \"swamp\"   : 1,     Sets the room to a swamp region      \"dessert\" : 1,     Sets the room to a dessert region      \"plain\"   : 1,     Sets the room to a plain region      \"mountain\": 1,     Sets the room to a mountain region      \"town\"    : 1,     Sets the room to inside a town      \"polar\"   : 1,     Sets the room to a polar region      \"water\"   : 1,     Sets the room to underwaterNote: use desert, not dessert... unless of course your areais made entirely of ice cream.","size":648,"title":"terrain properties","date":1217465297,"owner":"nulvect",]),(["message":"looks like we're also using the \"sky\" property, just so anyone else who wants to check it out later knows","size":106,"title":"addition","date":1220224907,"owner":"pyro",]),(["message":"Our log() function is the natural log, normally called ln in math, that's log base e.To find the logarithm of x in base 10 for example, do this:float answer = log(x)/log(10);","size":177,"title":"logarithms","date":1223424800,"owner":"nulvect",]),(["message":"To use reference parameters, you use the word 'ref' just before the name of thevariable in both the function definition AND the function call:int do_stuff(int ref x, string a) { stuff happens here; }...do_stuff(ref mynum, name);If you don't know what reference parameters are, it means the function youare calling can change the value of the variable in the originating function.If you don't understand this, then you don't need to use them so don't worry about it.","size":474,"title":"reference parameters","date":1223424954,"owner":"nulvect",]),(["message":"The 'mraces' command lists all the types you can use for set_body_type().All of these are in /adm/db/mon_races/ so you can see what limbs eachbody type sets up. You can also use add_limb() and remove_limb()(both from /std/living/body.c I believe) on an existing body typeto set it up however you'd likeFor example, you could start with the crab body and add two morelegs to make it a lobster.(I think... crabs are eight and lobsters ten, right??)remove_limb(\"left hand\"), oraadd_limb(\"extra limb\", \"limb that is attached to this one\", 50, 0, 0);That's the limb name to add, then the name of a limb that should fall offif this one does (or the word \"FATAL\" in caps, or \"\"), then the limb'shitpoints before falling off - which is tricky, try looking at whatexisting things are with call monster;query_body_mapping - then thecurrent damage to the limb and the limb's natural AC.","size":892,"title":"monster bodies","date":1259172758,"owner":"nulvect",]),})
read_by ({({"nulvect","stormbringer","whit","daos","hepualahaole","daboura","nightshade","luna","amun","pyro","kilir","ironman","vian","morvudd","drackmire","frisky","baine",}),({"pyro","amun","nulvect","ironman","daos","whit","stormbringer","hepualahaole","vian","morvudd","drackmire","frisky","baine",}),({"nulvect","pyro","amun","ironman","daos","whit","stormbringer","hepualahaole","vian","morvudd","drackmire","frisky","baine",}),({"pyro","amun","nulvect","ironman","stormbringer","whit","daos","hepualahaole","vian","morvudd","drackmire","frisky","baine",}),({"nulvect","pyro","amun","daos","ironman","stormbringer","hepualahaole","whit","vian","morvudd","drackmire","frisky","baine",}),({"nulvect","pyro","amun","daos","ironman","stormbringer","hepualahaole","whit","vian","morvudd","drackmire","frisky","baine",}),({"nulvect","whit","vian","daos","stormbringer","pyro","amun","drackmire","ironman","frisky","baine",}),})
