//      /adm/daemon/race_d.c
//      the daemon for setting up race info
//      from the Nightmare Mudlib
//      created by Descartes of Borg 10 june 1993
//
//      rewritten completely by Nulvect 2010-07-27

// TODO:
// edit hospitals, replace spell, torpor spell to not use query_limb_info

#include <dirs.h>
#include <race_cl.h>

// be sure this has a / at the end!
#define RACE_DIR DIR_DB+"/all_races/"


// yep, all our data in one array of structs
class Race *races;


void reload_race_configs();
void load_race_configs();
void reload_race(string name);
void parse_race_config(string file);
mapping parse_limb_config(string *data);
void remove_race(string name);
class Race query_race_data(string name);
int is_race(string name);
int query_is_race(string name);
int is_player_race(string race);
int is_monster_race(string race);
string *query_races();
string *query_player_races();
string *query_new_player_races();
string *query_aliases(string race);
varargs int query_weight(string name, int con);
int query_monster_fingers(string race);
int query_fingers(string name);
int query_sight_bonus(string name);
int query_undead(string name);
string *query_genders(string race);
string query_language(string race);
string query_class(string race);
string query_subclass(string race);
mapping query_race_limb_data(string name);
mapping query_limb(string limb, string race);
string *query_limbs(string name);
int is_limb(string limb, string race);
int query_is_limb(string limb, string race);
string *query_monster_wielding_limbs(string race);
string *query_wielding_limbs(string name);
mapping query_limb_info(string limb, string race);
int query_max_dam(string limb, string race, int max_hp, int monster);
int query_importance(string limb, string race);
string *query_required_limbs(string what, string race);
string *query_poison_limbs(string race);
string *query_race_stats(string race);
int query_stat_adjustment(string stat, string race);
int query_stat_roll(string stat, string race);
int query_stat_cost(string stat, string race);
string *query_race_skills(string race);
int query_skill_start(string skill, string race);
int query_skill_max(string skill, string race);
int query_skill_cost(string skill, string race);
mapping query_resistances(string race);
mapping query_properties(string race);
int query_undead(string race);
int query_rideable(string race);
string query_language(string race);
mapping body(object ob);
mapping monster_body(string race, int maxhp);
mapping do_rolls(string race);


void create() {
  reload_race_configs();
}


// Configs ------//
void reload_race_configs() {
  races = ({});
  load_race_configs();
}
void load_race_configs() {
  string *dir = get_dir(RACE_DIR);

  // load the default race first
  parse_race_config("default");

  foreach (string file in dir) {
    parse_race_config(file);
  }
}
void reload_race(string name) {
  remove_race(name);
  parse_race_config(name);
}
void parse_race_config(string file) {
  string *data;
  class Race r;

  if (query_is_race(file)) return;

  if (file_size(RACE_DIR+file) < 1) return;
  data = explode(""+read_file(RACE_DIR+file), "\n");

  r = new(class Race);
  r->name = file;
  r->limbs = ([]);
  r->stats = ([]);
  r->skills = ([]);
  r->resistances = ([]);
  r->properties = ([]);
  r->genders = ({});
  r->aliases = ({});

  // add it to the race list - changes we make later should stick
  races += ({ r });

  // we only default on these seven things to discourage extreme laziness
  if (r->name != "default") {
    r->sight = query_sight_bonus("default");
    r->size = query_weight("default");
    r->fingers = query_fingers("default");
    r->language = query_language("default");
    r->undead = query_undead("default");
    r->rideable = query_rideable("default");
    r->genders = query_genders("default");
  }

  foreach (string line in data) {
    string keyword, setting;
    string parent;
    string *exp;
    int sep;

    if (line[0..0] == "#") continue;
    if (line[<1..<1] == "\r") line = line[0..<2];
    if (!strlen(line)) continue;

    sep = strsrch(line, " ");
    if (sep == -1) continue;

    keyword = line[0 .. sep-1];
    setting = line[sep+1 .. <1];
    exp = explode(setting, ":");

    switch (keyword) {

      case "player":
	r->player = to_int(setting);
      break;

      case "newplayer":
	r->newplayer = to_int(setting);
      break;

      case "sight":
	r->sight = to_int(setting);
      break;

      case "size":
      case "weight":
        r->size = to_int(setting);
      break;

      case "fingers":
	r->fingers = to_int(setting);
      break;

      case "undead":
	r->undead = to_int(setting);
      break;

      case "rideable":
	r->rideable = to_int(setting);
      break;

      case "language":
	r->language = ""+setting;
      break;

      case "class":
	r->myclass = exp[0];
        r->mysub = exp[1];
      break;

      case "resistance":
	r->resistances[exp[0]] = to_int(exp[1]);
      break;

      case "property":
	r->properties[exp[0]] = to_int(exp[1]);
      break;

      case "stat":
	r->stats[exp[0]] = ([
	  "roll" : to_int(exp[1]),
	  "cost" : to_int(exp[2]),
	]);
      break;

      case "skill":
	r->skills[exp[0]] = ([
          "start" : to_int(exp[1]),
	  "max" : to_int(exp[2]),
	  "cost" : to_int(exp[3]),
	]);
      break;

      case "limb":
	r->limbs[exp[0]] = parse_limb_config(exp);
	parent = r->limbs[exp[0]]["parent"];
	if (!nullp(r->limbs[parent]))
	  r->limbs[parent]["children"] += ({ exp[0] });
      break;

      case "gender":
      case "genders":
	r->genders = exp;
      break;

      case "alias":
      case "aliases":
	r->aliases += exp;
      break;

      case "body":
	// if depending on another race, make sure it's loaded first
	if (!query_is_race(setting) && setting != r->name)
	  parse_race_config(setting);
        // double check that it succeeded loading
        if (query_is_race(setting))
	  r->limbs = query_race_limb_data(setting);
      break;

      case "delete":
	foreach (string l in exp)
	  map_delete(r->limbs, l);
      break;
    }
  }

}

mapping parse_limb_config(string *data) {
  int fatal = 0, wield = 0, poison = 0, ac = 0;
  string required="";
  string *tmp;
  mapping ret;

  if (sizeof(data) > 3) {
    tmp = explode(data[3], ",");
    foreach (string limbopt in tmp) {
      switch (limbopt) {
	case "wield": wield=1; break;
	case "fatal": fatal=1; break;
	case "poison": poison=1; break;
	default:
	  if (sscanf(limbopt, "ac %d", ac) == 1)
	    break;
	  else
	    // fall through
	    ;
	case "walk":
	case "fly":
	case "bite":
	// this is the default for any limb flag not recognized
	  required += limbopt + ",";
      }
    }
  }

  ret = ([
    "importance" : to_int(data[1]),
    "parent" : ""+data[2],
    "children" : ({}),
    "fatal" : fatal,
    "wield" : wield,
    "poison" : poison,
    "ac" : ac,
    "required" : required,
  ]);

  return ret;
}

void remove_race(string name) {
  class Race *search = filter(races, (: $1->name == $2 :), name);
  if (sizeof(search))
    races -= ({ search[0] });
}

// Race queries -//

class Race query_race_data(string name) {
  class Race ret;
  class Race *search;
  if (!name || !strlen(name))
    name = "default";
  // make a list of all races with this name,
  // plus all races with this as an alias
  search = filter(races,
    (:
      $1->name == $2 || member_array($2, $1->aliases) != -1
    :),
    name
  );
  // above should only result in one entry max
  if (sizeof(search))
    return copy(search[0]);
  return 0;
}

int is_race(string name) { return query_is_race(name); }
int query_is_race(string name) { return (query_race_data(name) ? 1 : 0); }

int is_player_race(string race) {
  return member_array(race, query_player_races()) != -1;
}
int is_monster_race(string race) { return query_is_race(race); }

string *query_races() { return map(races, (: $1->name :) ); }
string *query_player_races() {
  return map(
    // first filter it down to only player races
    filter(races, (: $1->player == 1 :)),
    // then return their names
    (: $1->name :)
  );
}

string *query_new_player_races() {
  return map(
    // first filter to new player races
    filter(races, (: $1->player == 1 && $1->newplayer == 1 :)),
    // then return their names
    (: $1->name :)
  );
}

string *query_aliases(string race) {
  class Race r = query_race_data(race);
  if (r)
    return copy(r->aliases);
  return ({});
}

// Various ------//

// weight, sight, fingers, undead, language, and rideable will all be copied
// from default info if not given

varargs int query_weight(string name, int con) {
  class Race r = query_race_data(name) || query_race_data("default");
  int ret;

  ret = r->size;

  // this was the formula in the old race_d, seems extreme though
  // each point of con == 100 weight
  // unused at this time
  if (con)
    ret += (con-10)*100;

  return ret;
}

int query_monster_fingers(string race) {
  return query_fingers(race);
}
int query_fingers(string name) {
  class Race r = query_race_data(name) || query_race_data("default");
  return r->fingers;
}

int query_sight_bonus(string name) {
  class Race r = query_race_data(name) || query_race_data("default");
  return r->sight;
}

int query_undead(string name) {
  class Race r = query_race_data(name) || query_race_data("default");
  return r->undead;
}

string *query_genders(string race) {
  class Race r = query_race_data(race) || query_race_data("default");
  return r->genders;
}

string query_language(string race) {
  class Race r = query_race_data(race) || query_race_data("default");
  return r->language;
}

int query_rideable(string race) {
  class Race r = query_race_data(race) || query_race_data("default");
  return r->rideable;
}

mapping query_properties(string race) {
  class Race r = query_race_data(race) || query_race_data("default");
  return copy(r->properties);
}

string query_class(string race) {
  class Race r = query_race_data(race);
  if (r)
    return r->myclass;
  return 0;
}

string query_subclass(string race) {
  class Race r = query_race_data(race);
  if (r)
    return r->mysub;
  return 0;
}

// Limbs --------//

mapping query_race_limb_data(string name) {
  class Race r = query_race_data(name) || query_race_data("default");
  return copy(r->limbs);
}

mapping query_limb(string limb, string race) {
  mapping limbs = query_race_limb_data(race);
  if (query_is_limb(limb, race))
    return copy(limbs[limb]);
  return ([]);
}

string *query_limbs(string name) { return keys(query_race_limb_data(name)); }

int is_limb(string limb, string race) { return query_is_limb(limb, race); }
int query_is_limb(string limb, string race) {
  return member_array(limb, query_limbs(race)) != -1;
}

string *query_monster_wielding_limbs(string race) {
  return query_wielding_limbs(race);
}
string *query_wielding_limbs(string name) {
  mapping limbdata = query_race_limb_data(name);
  limbdata = filter(limbdata, (: $2["wield"] == 1 :) );
  return keys(limbdata);
}

// exists purely for backwards compatibility
mapping query_limb_info(string limb, string race) {
  mapping limbs = query_race_limb_data(race);
  mapping tmp;
  if (nullp(limbs[limb]))
    return ([]);
  tmp = ([
    "max" : limbs[limb]["importance"],
  ]);
  if (limbs[limb]["fatal"])
    tmp["ref"] = "FATAL";
  else if (sizeof(limbs[limb]["children"]))
    tmp["ref"] = limbs[limb]["children"][0];
  else
    tmp["ref"] = "";
  if (limbs[limb]["parent"]) {
    if (limbs[limb]["parent"] == "torso")
      tmp["attach"] = "0";
    else
      tmp["attach"] = limbs[limb]["parent"];
  }
  else
    tmp["attach"] = "0";
  return tmp;
}

// notice the different formulas
// h / (i * 5) for mobs
// (h / i) * 5 for players
// thus, players have much higher max limb damage
// this may be changed in the future
int query_max_dam(string limb, string race, int max_hp, int monster) {
  int im = query_importance(limb, race);
  if (monster)
    return max_hp / (im * 5);
  else
    return (max_hp / im) * 5;
}

int query_importance(string limb, string race) {
  mapping limbs = query_race_limb_data(race);
  if (nullp(limbs[limb]))
    return 1;
  return limbs[limb]["importance"];
}

string *query_required_limbs(string what, string race) {
  mapping limbs = query_race_limb_data(race);
  limbs = filter(limbs,
    (:
      member_array($3, explode($2["required"], ",")) != -1
    :),
    what
  );
  return keys(limbs);
}

string *query_poison_limbs(string race) {
  mapping limbs = query_race_limb_data(race);
  limbs = filter(limbs,
    (: $2["poison"] == 1 :),
  );
  return keys(limbs);
}

// Stats --------//

string *query_race_stats(string race) {
  class Race r = query_race_data(race) || query_race_data("default");
  if (r)
    return keys(r->stats);
  return ({});
}

int query_stat_adjustment(string stat, string race) {
  return query_stat_roll(stat, race);
}
int query_stat_roll(string stat, string race) {
  class Race r = query_race_data(race) || query_race_data("default");
  return r->stats[stat]["roll"];
}

int query_stat_cost(string stat, string race) {
  class Race r = query_race_data(race) || query_race_data("default");
  return r->stats[stat]["cost"];
}

// Skills -------//

string *query_race_skills(string race) {
  class Race r = query_race_data(race);
  if (r)
    return keys(r->skills);
  return ({});
}

int query_skill_start(string skill, string race) {
  class Race r = query_race_data(race);
  if (r && !nullp(r->skills[skill]))
    return r->skills[skill]["start"];
  return 0;
}

int query_skill_max(string skill, string race) {
  class Race r = query_race_data(race);
  if (r && !nullp(r->skills[skill]))
    return r->skills[skill]["max"];
  return 0;
}

int query_skill_cost(string skill, string race) {
  class Race r = query_race_data(race);
  if (r && !nullp(r->skills[skill]))
    return r->skills[skill]["cost"];
  return 0;
}

// Resistances ---//

mapping query_resistances(string race) {
  class Race r = query_race_data(race);
  if (r)
    return copy(r->resistances);
  return ([]);
}

// Generators ----//

mapping body(object ob) {
  string race;
  mapping limbs;
  int max_hp;
  int monster = ob->is_monster();

  if (monster) {
    race = ob->query_body_type();
    if (!race)
      race = ob->query_race();
  }
  else
    race = ob->query_race();

  limbs = query_race_limb_data(race);
  max_hp = ob->query_max_hp();

  foreach (string limb, mapping data in limbs) {
    int max;
    string limbref;

    max = query_max_dam(limb, race, max_hp, monster);

    if (data["fatal"] == 1)
      limbref = "FATAL";
    else if (sizeof(data["children"]))
      limbref = data["children"][0];
    else
      limbref = "";

    // change to the stuff the current body.c expects to be there
    // was going to leave the other stuff in, but it's mostly things that
    // are universal to the race so don't need to be in every player
    limbs[limb] = ([
      "limb_ref" : limbref,
      "max_dam" : max,
      "damage" : 0,
      "ac" : data["ac"],
      "status" : 0,
    ]);
    if (data["wield"] == 1)
      limbs[limb]["wieldable"] = 1;
  }

  return limbs;
}

// backwards compat only
mapping monster_body(string race, int maxhp) {
  if (previous_object() && previous_object()->is_living())
    return body(previous_object());
  return ([]);
}

mapping do_rolls(string race) {
  class Race r;
  mapping rolls;

  r = query_race_data(race) || query_race_data("default");

  rolls = map(r->stats, function(string stat, mapping data) {
    int value = 7 + random(10) + data["roll"];
    if (value < 2) value = 2;
    if (value > 23) value = 23;
    return value;
  } );

  return rolls;
}


