// MP REGEN STONE... seeker
/* 12-11-2000
 *     Found a problem in stones where the heart beats were not turned
 *     off in the un-used stones and filled up the heartbeat processing
 *     which in turn lagged the living crap out of the mud. It should be
 *     fine now since i re-wrote it so the first object is the ONLY one 
 *     that has a heart beat and it controls the following 3 stones,
 *     and the rest just sit there. The heart_beat is passed on to the 
 *     second stone if the first one is move()'d or remove()'d from the
 *     player. Also there is no heart beat if the owner is non-living.
 *     [seeker]
**/
#include <std.h>
inherit OBJECT;
int MANA;
int quick=0;
object owner;
void do_mana(int quickly);
void create()
{
    ::create();
    set_name("acid orb");
    set_short("%^BOLD%^%^GREEN%^A%^RESET%^%^GREEN%^c%^BOLD%^i%^RESET%^%^GREEN%^d%^BOLD%^i%^RESET%^%^GREEN%^c %^BOLD%^O%^RESET%^%^GREEN%^r%^BOLD%^b%^RESET%^");
    set_long("%^GREEN%^This orb is a sphere of %^BOLD%^boiling acid%^RESET%^%^GREEN%^, without leaving its sphere shape.  It is "
             "very strange, and it makes your skin tingle.  You feel the urge to crack it. "
             "It is Definately a Creation of Forsaken.");
    set_id( ({ "orb", "acid orb", "stonecheck" }) );
    set_mass(1);
    set_value(0);
    MANA = random(3000)+3000;
}
int query_mana() { return MANA; }
int query_quick() { return quick; }
int set_mana(int x) { MANA = x; return x; }
int add_mana(int x) { MANA += x; }
int set_heart()     { set_heart_beat(1); }
void init()
{
    owner = environment(this_object());
    ::init();
    if (owner)
        if (present("stonecheck", owner)==this_object()) 
            set_heart_beat(1);
    add_action("fRub", "crack");
}
int fRub(string str)
{
    if (environment(this_object())!=this_player())
        return 0;
    if (str!="orb") return notify_fail("Crack what?\n");
    if (this_player()->query_paralyzed()) return notify_fail("You cannot do that "
          "while paralyzed.\n");
    if (this_player()->query_disable())
       return notify_fail("You are busy.\n");
    write("%^GREEN%^You crack the orb, your bones shiver, your skin burns, you grin and feel the rush.%^RESET%^");
    say("%^GREEN%^"+this_player()->query_cap_name()+" cracks a orb and begins to shiver, "+this_player()->query_possessive()+" skin begins to smoke as the orb is consumed.%^RESET%^");
    this_player()->set_disable();
    quick = 1;
    return 1;
}
string query_short()
{
 string str;
 str = ::query_short()+" ";
 if (MANA >= 5000)
   str += "(boiling)";
  else
 if (MANA >= 4000)
   str += "(fizzing)";
  else
 if (MANA >= 3000)
   str += "(brewing)";
  else
 if (MANA >= 2000)
   str += "(bubbling)";
  else
 if (MANA >= 1000)
   str += "(quivering)";
  else
 if (MANA < 500)
   str += "(calm)";
 return str;
}
void heart_beat()
{
    object ob2,ob3;
    owner = environment(this_object());
    if (!owner) return;
    if ((present("stonecheck", owner)!=this_object()) || 
      (!owner->is_living()))
    {
        set_heart_beat(0);
        return;
    }
    ob2 = present("stonecheck 2", owner);
    ob3 = present("stonecheck 3", owner);
    /* --- Give mana to the player --- */
    do_mana(quick);
    if (ob2) ob2->do_mana(quick);
    if (ob3) ob3->do_mana(quick);
}
void do_mana(int quickly)
{
    owner = environment(this_object());
    if (!owner->is_living())
    {
        if (random(100) > 50)
            MANA -= 5;
        if (MANA > 0) return;
    }
    if (MANA <= 0)
    {
        message("info", "The Acid orb you are holding begins to smoke, then disappears completely, it's magical energies exhausted.", owner); 
        this_object()->remove();
        return;
    }
    if (random(100) > 40 )
        if (quickly && owner->query_mp() < owner->query_max_mp())
        {
            if (random(100) < 25)
            {
                owner->add_mp(200);
                MANA -= 250;
            }
            else
            {
                if (random(100) < 50)
                    owner->add_mp(100);
                MANA -= 125;
            }
            if (owner->query_mp() >= owner->query_max_mp())
                quickly = 0;
            return;
        }
    if (random(100) > 50)
    {
        owner->add_mp(9);
        MANA -= 10;
    }
}
int move(mixed dest)
{
    owner = environment(this_object());
    if (!owner) return ::move(dest);
    if (present("stonecheck 2", owner) &&
      owner->is_living())
        present("stonecheck 2", owner )->set_heart();
    return ::move(dest);
}
int remove()
{
    owner = environment(this_object());
    if (!owner) return ::remove();
    if (present("stonecheck 2", owner) &&
      owner->is_living())
        present("stonecheck 2", owner )->set_heart();
    return ::remove();
}
int query_heart() { return query_heart_beat(this_object()); }
