//  Coded by Whit
//  Treasury for guilds
#include <std.h>
#include <guild.h>
#include <daemons.h>
#include <money.h>
#include <treasury.h>
#define GUILDNAME "AoD"
#define BANK_ID "guild"
#define ERROR "There is currently no treasury made for your guild.  Please bug this.\n"
inherit ROOM;
mapping leader, council;
void create() {
    ::create();
    restore_object("/d/guilds/save/"+GUILDNAME);
     set_name("AoD Treasury");
     set_short("treasury room");
    set_long("%^BOLD%^%^BLACK%^Sk%^RESET%^%^WHITE%^u%^BOLD%^%^BLACK%^lls line the walls, bags full of Black Diam%^BOLD%^%^WHITE%^o%^BOLD%^%^BLACK%^nds line the "
"%^BOLD%^%^BLACK%^floors. %^BOLD%^%^YELLOW%^Gold%^BOLD%^%^BLACK%^ coins fill the room with a %^BOLD%^%^YELLOW%^Golden%^BOLD%^%^BLACK%^ sh%^BOLD%^%^YELLOW%^i%^BOLD%^%^BLACK%^ne. %^BOLD%^%^YELLOW%^Coins%^BOLD%^%^BLACK%^ "
"%^BOLD%^%^BLACK%^flow from the eyes of the Sk%^RESET%^%^WHITE%^u%^BOLD%^%^BLACK%^lls. Dark R%^RESET%^%^RED%^ubi%^BOLD%^%^BLACK%^es cover the floor "
"%^BOLD%^%^BLACK%^with a r%^BOLD%^%^RED%^e%^BOLD%^%^BLACK%^d glow. ");
     set_properties(([
        "light"       : 2,
        "night light" : 1,
        "no bump"     : 1,
        "indoors"     : 1,
        "plain"       : 1,
        "no steal"    : 1,
        "no teleport" : 1,
]));
 set_exits( (["west" : "/d/guilds/darkness/rooms/room"]) );

set_items(([
        "skulls" : "%^BOLD%^%^BLACK%^Human Skulls filled with coins.%^RESET%^",
        "bags" : "%^BOLD%^%^BLACK%^Bags filled with Black Diamonds.%^RESET%^ "]) );

}

void init() {
    ::init();
    add_action("read", "read");
    add_action("open", "open");
    add_action("close", "close");
    add_action("deposit", "deposit");
    add_action("withdraw", "withdraw");
    add_action("balance", "balance");
}
int close(string str) {
    int i;
    mapping money;
    if(!wizardp(this_player())) return 0;
    if(!str || str != "account") return 0;
    money = (mapping)TREASURY_D->query_balance(
(string)this_player()->query_guild(), BANK_ID);
    if(!money || money == ([])) {
        write("The teller says: You have no account here to close!");
        return 1;

    }
    for(i=0; i<sizeof(HARD_CURRENCIES); i++) {
        if(money[HARD_CURRENCIES[i]]) 
            this_player()->add_money(HARD_CURRENCIES[i],
              money[HARD_CURRENCIES[i]]);
    }
    write("Account closed.\n");
    TREASURY_D->close_account((string)this_player()->query_guild(), BANK_ID);
    return 1;
}
int open(string str) {
    int x;
    if(!wizardp(this_player())) return 0;
    if(!this_player()->query_guild()) return 0;
    if(!str || str != "account") return 0;
    x = (int)TREASURY_D->open_account((string)this_player()->query_guild(),
      BANK_ID);
    if(x != TRANSACTION_OK) {
        write("That guild already has an account.  Please remember to set "
          "yourself to the right guild.\n");

        return 1;
    }
    write("Treasury set.\n");
    return 1;
}
int balance(string str) {
    mapping money;
    int i;
    money = (mapping)TREASURY_D->query_balance(
      (string)this_player()->query_guild(), BANK_ID
    );
    if(!money || money == ([])) {
        write(ERROR);
        return 1;
    }
    say(this_player()->query_cap_name()+" asks for treasury balance "
      "information.");
    for(i=0; i<sizeof(HARD_CURRENCIES); i++) {
        write(capitalize(HARD_CURRENCIES[i])+": "+
          money[HARD_CURRENCIES[i]]+" coins");

    }
    return 1;
}
int deposit(string str) {
    string type, *cur;
    mapping money;
    int x, amount;
    if(!str) {
        notify_fail("Correct syntax: <deposit [amount] [type]>\n");
        return 0;
    }
    if (str=="all")
    {
        money = (mapping)TREASURY_D->query_balance(
          (string)this_player()->query_guild(), BANK_ID
        );
        if (!money || money == ([]) )
            return notify_fail(ERROR);
        money = ([]);
        cur = this_player()->query_currencies();
      if (!sizeof(cur)) return notify_fail("The treasury is empty!\n");
        x = sizeof(cur);
        while(x--)
            this_player()->force_me("deposit
"+this_player()->query_money(cur[x])+""+cur[x]);
        return 1;
    }
    if(sscanf(str, "%d %s", amount, type) != 2) {
        notify_fail("Correct syntax: <deposit [amount] [type]>\n");
        return 0;
    }
    if((int)this_player()->query_money(type) < amount) {
        notify_fail("There is not that much in the treasury!\n");
        return 0;
    }
    x = (int)TREASURY_D->deposit(
      (string)this_player()->query_guild(), BANK_ID, amount, type
    );
    if(x != TRANSACTION_OK) {
        switch(x) {
        case NO_ACCOUNT:

            notify_fail(ERROR);
            break;
        case BAD_MONEY:
            notify_fail(ERROR);
            break;
        default: notify_fail(ERROR);
        }
        return 0;
    }
    this_player()->add_money(type, -amount);
    write("The teller takes your "+amount+" "+type+" coins.");
    say(this_player()->query_cap_name()+" deposits some money.");
    write_file("/d/guilds/"+GUILDNAME+"/scroll",
      "%^BOLD%^%^GREEN%^"+this_player()->query_cap_name()+
      " deposits:%^RESET%^ "+amount+" "+type+".\n");
    return 1;
}
int withdraw(string str) {
    string type;
    object tpname;


    int x, amount;
    tpname = this_player()->query_cap_name();
    if(!wizardp(this_player()) && !leader[tpname] && !council[tpname]) {
        write("You are not allowed to withdraw.\n");
        say(this_player()->query_cap_name()+" tried to withdraw but fails.");
        return 1;
    }
    if(!str) {
        notify_fail("Correct syntax: <withdraw [amount] [type]>\n");
        return 0;
    }
    if(sscanf(str, "%d %s", amount, type) != 2) {
        notify_fail("Correct syntax: <deposit [amount] [type]>\n");
        return 0;
    }
    if(amount < 0) {
        notify_fail("That would be a neat trick!\n");
        return 0;
    }
    x = (int)TREASURY_D->withdraw(

      (string)this_player()->query_guild(), BANK_ID, amount, type);
    if(x != TRANSACTION_OK) {
        switch(x) {
        case NO_ACCOUNT:
            notify_fail(ERROR);
            break;
        case BAD_MONEY:
            notify_fail("That is not a real money type!\n");
            break;
        default: notify_fail("You cant do that!\n");
        }

        return 0;
    }
    this_player()->add_money(type, amount);
    write("The teller gives you your "+amount+" "+type+" coins.");
    say(this_player()->query_cap_name()+" withdraws some money.");
    write_file("/d/guilds/"+GUILDNAME+"/scroll",
    "%^BOLD%^%^RED%^"+this_player()->query_cap_name()+
      " withdraws:%^RESET%^ "+amount+" "+type+".\n");
    return 1;
}

int read(string str) {
    if(str != "sign" && str != "scroll") return notify_fail("Read what?\n");
    if(str == "sign") {
    message("info",
      "The following commands may be used to use the treasury.\n\n"
      "<balance>             |     Gives you account balance information.\n"
      "<deposit [#] [type]>  |     Deposits # of currency of type.\n"
      "<withdraw [#] [type]> |     Withdraws # of currency of type.\n"
      "<read [sign/scroll]>  |     Sign shows this screen and scroll shows you has deposited and withdrew money.\n\n",
      this_player());
    return 1;
    }
    if(str == "scroll") {
        write("           The following people have withdrew/deposited money: \n\n");
        if(!file_exists("/d/guilds/"+GUILDNAME+"/scroll")) {
          write("There has been no transactions in this treasury.\n");
          return 1;
        }

        this_player()->more("/d/guilds/"+GUILDNAME+"/scroll");
        return 1;
    }
}

