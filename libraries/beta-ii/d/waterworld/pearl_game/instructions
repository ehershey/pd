//  This file is to give details for how to operate the Pearl_game system.
// -----------------------------------------------------------------------
//
// Each pearl has been given a unique ID and a % chance that it will be drawn.
//
//The <type>_clam.c files calls the function located in the file PEARL_GAME.c
//The numbers limit the game so only certain pearls can come out with certain
// clams.  The following list is what clams call what pearls;
//           blood_clam.c          blood_pearl.c
//           star_clam.c           star_pearl.c
//           rose_clam.c           rose_pearl.c
//          purple_clam.c          purple_pearl.c
//           blue_clam.c           blue_pearl.c
//           black_clam.c          black_pearl.c
//           white_clam.c          white_pearl.c
//
//Each clam in the list can call the pearl to the right of it and all pearls
//below it.  However, the clams are set up so those ABOVE them in the list
// can not be called. For example, a purple clam can call purple, blue,
// black and white pearls but can NOT call rose, star and blood pearls.
// This system allows you to limit what pearls are available in a given
// location.
//
// The monster heldalogala.c carries the interface for PEARL_SHOP.c
// You can use any monster you wish to use the func contained in  
// or borrow heldalogala.c and give it your own name for your area.
//
// In summary, using the game is very simple. Load the clam you wish
// into the room as to limit what pearls can be located in a given area.
// After that simply have heldalogala.c or whatever shopkeeper you wish
// to recieve the pearls call the function contained within PEARL_SHOP.c
//
//
//To call the fuction using another monster for PEARL_SHOP.c , use the
//following line;
//
// void catch_tell(string recieved) {
// PEARLS"PEARL_SHOP.c"->pearl_reciever(recieved,profit,this_object());
//         if(pearls=present("pearl")) {pearls->remove();}
//                 }
//
// Of course you have to define the path 'PEARLS' in your header file
// to point to the game directory. the variable profit is an int
// representing the gold issued for the pearl. PEARL_SHOP.c already
// increases the gold a player has by the correct amount. Profit is
// there in case you wish to have the monster say something additional
// about the pearls and prizes. The func this_object() refers to the
// player's file that gave the pearl to the shopkeeper.
//
// The variable 'pearls' must be defines as an object in your shopkeeper.
// This variable and if statement checks to see if a pearl is in the
// shopkeepers possesion and deletes it if there is.
//
//               ---- Ironman
