#include <std.h>
#include <rooms.h>
#include <council.h>
#include <daemons.h>
#include <lodos.h>

inherit ROOM;

string get_new_title(object tp);
string get_male_cleric(int lev);
string get_female_cleric(int lev);
string get_male_monk(int lev);
int goWest();
int goEast();
string previous_title(object tp);
int get_cost(string which, int lev);

int goWest() {
   if (this_player()->query_class() != "monk" &&
       !wizardp(this_player())) {
      write("A magical force holds you back.");
      return 1;
   }
   this_player()->move_player(ROOMS"monk_wing", "west");
   return 1;
}

int goEast() {
   if (this_player()->query_class() != "cleric" &&
       !wizardp(this_player())) {
      write("A magical force holds you back.");
      return 1;
   }
   this_player()->move_player(ROOMS"cleric_wing", "east");
   return 1;
}

void create() {
    object ob;

    ::create();
   set_properties((["town" : 1, "indoors" : 1, "building" : 1])); 
    set_property("no attack",1);
    set_short("The Hall of Peace");
    set_property("light", 2);
    set("long",
         "Welcome to The Hall of Peace!\n"
	"Both Monks and Clerics come here to protect and heal "
        "both the four lands and Lodos itself. It is here that "
        "both of these classes come to advance in level and to "
        "train their abilities in the arts of healing and fighting. "
	"The available commands are <cost>, <advance>, <list (number)>, "
	"<improve stat>, <train skill amount>, and <roll stats>.");
    set_exits( 
              (["down" : ROOMS"temple6",
              "east" : ROOMS"cleric_wing",
              "west" : ROOMS"monk_wing"]) );

    ob = new(BBOARD);
    ob->set_name("board");
    ob->set_id( ({ "board", "peace board" }) );
    ob->set_board_id("peace_board");
    ob->set_max_posts(75);
    ob->set_edit_ok("inferno");
    ob->set_location(ROOMS"peace_hall");
    ob->set("short", "the board of peace");
    ob->set("long", "Both monks and clerics come here to post "
            "about their experiences and concerns.");
}

void init() {
    ::init();
/*    add_action("cost","cost"); */
    add_action("roll","roll");
    add_action("train", "train");
    add_action("improve", "improve");
    add_action("advance","advance");
    add_action("list","list");
    add_action("goWest", "west");
    add_action("goEast", "east");
  }

int roll(string str) {
    if(str != "stats") return 0;
    ROOM_SETTER->do_rolls();
    return 1;
}

string get_new_title(object tp)
{
    int lev;
    string gen, title;

    lev = (int)this_player()->query_level();
    gen = (string)this_player()->query_gender();
    if(this_player()->query_guild()) {
	if(present((string)tp->query_guild()+"_ob", tp)) {
	    if(lev > 19) title = "High mortal";
	    else title = (string)present((string)tp->query_guild()+"_ob", tp)->query_title(tp);
	    title += " $N";
	}
	else {
	    if(lev > 19) title = "High mortal $N";
	    else title = "$N";
	}
    }
    else {
	if(lev > 20) title = "High mortal $N";
	else title = "$N";
    }
    if(lev > 20) title += previous_title(tp);
    else if (this_player()->query_class() == "cleric") {
    if(gen == "male") title += " "+get_male_cleric(lev);
    else title += " "+get_female_cleric(lev);
    } else if (this_player()->query_class() == "monk") {
    if(gen == "male") title = title+" "+get_male_monk(lev);
    else title = title+" "+get_male_monk(lev);
    }
    return title;
}

string get_male_monk(int lev) {
    string *male_title_str;

    if(!male_title_str) male_title_str = allocate(20);
        male_title_str[19]      ="the master of the light";
        male_title_str[18]      ="the light fighter";
        male_title_str[17]      ="the saint";
        male_title_str[16]      ="the doctor of divinity";
        male_title_str[15]      ="the devil-dodger";
        male_title_str[14]      ="the slayer of evil";
        male_title_str[13]      ="the holy avenger";
        male_title_str[12]      ="the faith boxer";
        male_title_str[11]      ="the spiritual dagger";
        male_title_str[10]      ="the great seeker of the faith";
        male_title_str[9]       ="the mystic fighter";
        male_title_str[8]       ="the promoter of the faith";
        male_title_str[7]       ="the protector of good";
        male_title_str[6]       ="the protector of the weak";
        male_title_str[5]       ="the minor protector";
        male_title_str[4]       ="the evangelist";
        male_title_str[3]       ="the minor boxer";
        male_title_str[2]       ="the servant of Omicron";
        male_title_str[1]       ="the bible reader";
    if (lev >= 20) return "";
    return male_title_str[lev-1];
}

string get_male_cleric(int lev) {
    switch(lev) {
	case 1: return "the novice healer"; break;
	case 2: return "the new student of peace"; break;
	case 3: return "the student of peace"; break;
	case 4: return "the student in natural law"; break;
	case 5: return "the minor believer in universal unity"; break;
	case 6: return "the believer in kindness"; break;
	case 7: return "the unity of health"; break;
	case 8: return "the minor accolyte of peace"; break;
	case 9: return "the accolyte of peace"; break;
	case 10: return "the minor believer in Omicron"; break;
	case 11: return "the accolyte of Omicron"; break;
	case 12: return "the novise priest of Omicron"; break;
	case 13: return "the cleric"; break;
	case 14: return "the low master of peace"; break;
	case 15: return "the low master of health"; break;
	case 16: return "the master of peace"; break;
	case 17: return "the master of health"; break;
	case 18: return "the high priest to Omicron"; break;
	case 19: return "the grand priest to Omicron"; break;
	case 20: return "the newly empowered priest of health"; break;
	default: return ""; break;
    }
}

string get_female_cleric(int lev) {
    switch(lev) {
	case 8: return "the minor priestess of peace"; break;
	case 9: return "the minor priestess of health"; break;
	case 10: return "the lesser priestess of Omicron"; break;
	case 16: return "the priestess of beauty and health"; break;
	case 17: return "the master priestess to Omicron"; break;
	case 18: return "the high master priestess to Omircon"; break;
	case 19: return "the grand priestess to Omicron"; break;
        case 20: return "the newly empowered priestess of health"; break;
	default: return get_male_cleric(lev); break;
    }
}

int advance() { return (int)ADVANCE_D->advance(); }

int train(string str) {
    string which, which_tmp;
    int amount;

    if(!str) {
        notify_fail("Train what?\n");
        return 0;
    }
    if(sscanf(str, "%s %s %d", which, which_tmp, amount) == 3) which = which + " "+which_tmp;
    else if(sscanf(str, "%s %d", which, amount) !=2) {
	notify_fail("Correct syntax: <train skill amount>\n");
	return 0;
    }
    which = lower_case(which);
    if(!this_player()->skill_exists(which)) {
	notify_fail("No such skill.\n");
	return 0;
    }
    return (int)ADVANCE_D->train_player(this_player(), which, amount);
}

int improve(string str) {
    string *stats;
    int stat_cost;

    stats = ({ "strength", "intelligence", "wisdom", "dexterity", "constitution", "charisma" });
    str = lower_case(str);
    if(member_array(str, stats) == -1) {
	notify_fail("You have no such stat.\n");
	return 0;
    }
    stat_cost = get_cost(str, (int)this_player()->query_base_stats(str));
    if( (int)this_player()->query_exp()-stat_cost < (int)ADVANCE_D->get_exp( (int)this_player()->query_level() ) ) {
	notify_fail("You are not experienced enough to improve yourself in that way.\n");
	return 0;
    }
    this_player()->set_stats(str, (int)this_player()->query_base_stats(str) + 1);
    this_player()->add_exp(-stat_cost);
    message("Nmy_action", "You feel much ", this_player());
    message("Nother_action", (string)this_player()->query_cap_name()+
      " looks much ", this_object(), ({ this_player() }) );
    if(str == "strength") tell_room(this_object(), "stronger.");
    else if(str == "intelligence") tell_room(this_object(), "more intelligent.");
    else if(str == "wisdom") tell_room(this_object(), "wiser.");
    else if(str == "dexterity") tell_room(this_object(), "more nimble.");
    else if(str == "constitution") tell_room(this_object(), "sturdier.");
    else tell_room(this_object(), "more attractive.");
    return 1;
}

int get_cost(string stat, int lev) {
    switch(stat) {
  	case "intelligence": return (int)ADVANCE_D->get_stat_cost(1, lev); break;
	case "wisdom": return (int)ADVANCE_D->get_stat_cost(1, lev); break;
	case "strength": return (int)ADVANCE_D->get_stat_cost(1, lev); break;
  	default: return (int)ADVANCE_D->get_stat_cost(2, lev); break;
    }
}

int cost(string str) {
    int bing;
 
    write("Costs for advancement, training, and improvement:\n");
    bing = (int)ADVANCE_D->get_exp( (int)this_player()->query_level() + 1 );
    if(bing < 1) write("level:\t\tIt will cost you nothing to advance.");
    else write("level:\t\t"+bing+"\n");
    write("skills: You train by spending the amount of experience you
desire.");
    write("strength:\t\t" + get_cost("strength",
(int)this_player()->query_base_stats("strength")) +
"\t\tconstitution:\t\t" + get_cost("constitution",
(int)this_player()->query_base_stats("constitution")) );
    write("intelligence:\t\t" + get_cost("intelligence",
(int)this_player()->query_base_stats("intelligence")) +
"\t\tdexterity:\t\t" + get_cost("dexterity",
(int)this_player()->query_base_stats("dexterity")) );
    write("wisdom:\t\t" + get_cost("wisdom",
(int)this_player()->query_base_stats("wisdom")) +
"\t\tcharisma:\t\t" + get_cost("charisma",
(int)this_player()->query_base_stats("charisma")) );
    return 1;
}

string previous_title(object tp) {
    string pre, post, str;

    str = (string)tp->getenv("TITLE");
    sscanf(str, "%s $N %s", pre, post);
    return post;
}

int list(string str) {
    int x;

    if(!str) ROOMS+"quest_room"->list_quests(this_player(), 0);
    else {
	if(sscanf(str, "%d", x) != 1) {
	     notify_fail("You must give the number of the quest you want listed.\n");
	    return 0;
	}
	if(x<1) {
	    notify_fail("No such quest.\n");
	    return 0;
	}
        ROOMS+"quest_room"->list_quests(this_player(), x);
    }
    return 1;
}

