#include <daemons.h>
#include <flags.h>

#define tp this_player()
#define HELP_DIR "/doc/help/classes/"
#define MIN_REMORT_LEVEL 50
#define PK_WAIT 60*60*24*2 // two full days
//not currently checking for stealing, leave that up to justice to catch them
#define STEAL_WAIT 60*60*24 // one full day
// remort_wait is in hours
#define REMORT_WAIT 30
#define REMORT_PER_REBOOT 2 // how many per reboot??
#define TIRUN_DIR "/d/nopk/tirun/"
#define DRAGON_SUBS ({"red","blue","black","white"})
#define DRAGON_HELP "/doc/help/races/dragon"
#define DISABLE_REMORT 0

inherit DAEMON;

void remort_character(string clas, string sub);
void question(string q);
void showerror(string e);
int ok_remort(string what, string sub);

int cmd_remort(string str)
{
  int *info;
  mapping data;
  string cmd, sub;
  if (DISABLE_REMORT && !wizardp(this_player())) return notify_fail("This is being worked on.\n");

  data = tp->query_remort_data();

  if (str && str == "list") {
    if (!sizeof(data))
      message("info", "You have no remort info saved.", tp);
    else
      message("info", "You have information saved for the following:\n"+
       implode(keys(data), ", "), tp);
    return 1;
  }
  else if (str && sscanf(str, "%s %s", cmd, sub) == 2 && cmd == "show") {
    if (!sizeof(data) || nullp(data[sub]) || !sizeof(data[sub]))
      message("info", "You have not saved any remort information for that subclass.", tp);
    else message("info",
       sprintf("%19'-'s\n%s\n%19'-'s\n", "", capitalize(sub), "")+
       sprintf("Level %-13d\nExp   %-16d\n", data[sub]["level"], data[sub]["exp"])+
       sprintf("%19'-'s\n", "")+
       sprintf("Str %3d     Cha %3d\nDex %3d     Int %3d\nCon %3d     Wis %3d\n",
        data[sub]["stats"]["strength"], data[sub]["stats"]["charisma"],
        data[sub]["stats"]["dexterity"], data[sub]["stats"]["intelligence"],
        data[sub]["stats"]["constitution"], data[sub]["stats"]["wisdom"] ), tp);

    return 1;
  }

  if (file_name(environment(this_player()))[0..sizeof(TIRUN_DIR)-1] != TIRUN_DIR)
    return notify_fail("You may only remort while in Tirun.\n");

  if (tp->query_last_pk_time()+PK_WAIT > time())
    return notify_fail("You must wait longer to remort after you PK.\n");

  if (tp->query_recent_outlaw())
    return notify_fail("You cannot remort while you're an outlaw.\n");

  if (sizeof((string)tp->query_party()))
    return notify_fail("You must leave your party first.\n");

  if (tp->query_race() == "vampire" || tp->query_race() == "lich")
    return notify_fail("This command cannot handle the nuances of "+
     pluralize(tp->query_race())+" yet.\n");

  if (!(tp->query_subclass()) || tp->query_subclass() == "none")
    return notify_fail("You must pick a class and subclass first.\n");

  if ((int)tp->query_property("last remort time")+REMORT_WAIT*60*60 > time())
    return notify_fail("You may only remort once every "+REMORT_WAIT+" hours.\n");

  info = (int *)tp->query_property("last remort");

  /*
      if (sizeof(info=(int *)tp->query_property("last remort")) &&
          info[0] == EVENTS_D->query_next_reboot() &&
          info[1] >= REMORT_PER_REBOOT)
            return notify_fail("You can only remort "+cardinal(REMORT_PER_REBOOT)+" time"+
                               (REMORT_PER_REBOOT==1?"":"s")+" per reboot.\n");
  */

  if (!sizeof(info) && tp->query_level() < MIN_REMORT_LEVEL && !tp->query_property("can remort") &&
   !tp->query_remorted() && member_array(tp->query_race(), ({"archangel","demon"})) == -1)
    return notify_fail("You must reach level "+MIN_REMORT_LEVEL+" at least once before remorting.\n");

  message("no_wrap",
   "%^BOLD%^%^WHITE%^-------------------------------------------------------------------------------\n"
   "                             Class Change System\n"
   "%^BOLD%^%^WHITE%^-------------------------------------------------------------------------------\n\n"
   "This system will allow you to change your class/subclass.  Do you want to continue?   "
   ,tp);
  input_to("confirm_remort", I_NOECHO | I_NOESC);
  return 1;
}

void question(string q) {
  if (!q) return;
  message("info", "%^YELLOW%^Question:%^RESET%^ "+q, this_player() );
}

void showerror(string e) {
  if (!e) return;
  message("info", "%^BOLD%^%^RED%^Error:%^RESET%^ "+e, this_player() );
}

void confirm_remort(string answer)
{
  if(answer != "y" && answer != "yes") {
    write("Remort Canceled!");
    return;
  }
  write(read_file(HELP_DIR+"class"));
  message("info", "You can use \"quit\" or \"q\" at any time to cancel.", tp);
  question("Which class do you want to switch to?");
  input_to("ask_changeclass");
}
void ask_changeclass(string cls) {
  mapping data=([]);
  mapping drag=([]);
  if(!cls) cls="";
  switch(cls) {
  case "dragon":
    data = this_player()->query_remort_data();
    foreach (string color in DRAGON_SUBS)
      if (sizeof(data) && sizeof(data[color])) drag[color]=1;
    if (!sizeof(drag)) {
      showerror("You may not remort into a dragon.");
      return;
    }
  case "fighter":
  case "mage":
  case "clergy":
  case "rogue":
  case "wanderer":
    if (sizeof(drag)) {
      message("info", read_file(DRAGON_HELP), tp);
      question("What type of dragon do you want to switch to?");
    }
    else {
      write(read_file(HELP_DIR+cls));
      question("Which subclass do you want to switch to?");
    }
    input_to("ask_changesub", cls, drag);
    break;
  case "q":
  case "quit":
    write("Goodbye!");
    return;
    break;
  default:
    write(read_file(HELP_DIR+"class"));
    showerror("You did not select an appropriate class.  Try again.");
    input_to("ask_changeclass");
    break;
  }
}
void ask_changesub(string sub, string clas, mapping drag) {
  int ok;
  if(sub == "q" || sub == "quit") {
    write("Goodbye.");
    return;
  }
  switch(clas) {
  case "rogue":
    switch(sub) {
    case "assassin": case "scout": case "thief": case "thug": ok=1; break;
    default: ok=0; break;
    }
    break;
  case "fighter":
    switch(sub) {
    case "antipaladin":
    case "berserker": case "paladin": case "ranger": case "warrior": ok=1; break;
    default: ok=0; break;
    }
    break;
  case "mage":
    switch(sub) {
    case "necromancer": case "pyromancer": case "sorceror": case "wizard": ok=1; break;
    default: ok=0; break;
    }
    break;
  case "clergy":
    switch(sub) {
    case "cleric": case "druid": case "kataan": case "monk": ok=1; break;
    default: ok=0; break;
    }
    break;
  case "wanderer":
    switch(sub) {
    case "bard": case "gypsy": case "jester": case "swashbuckler": ok=1; break;
    default: ok=0; break;
    }
    break;
  case "dragon":
    if (member_array(sub, keys(drag)) != -1) ok=1;
    else ok=0;
    break;
  default:
    write(read_file(HELP_DIR+"class"));
    showerror("You did not select an appropriate class.  Try again.");
    input_to("ask_changeclass");
    break;
  }
  if(!ok || !ok_remort(tp->query_race(), sub)) {
    if (sizeof(drag)) write(read_file(DRAGON_HELP));
    else write(read_file(HELP_DIR+clas));
    showerror("You did not select an appropriate subclass.  Try again.");
    input_to("ask_changesub", clas, drag);
    return;
  }
  if (tp->query_class() == "dragon" && !(tp->query_remort_race())) {
    question("What race do you want to switch to (for non-dragon subclasses)?");
    input_to("ask_dragonrace", clas, sub);
    return;
  }
  remort_character(clas, sub);
}
void ask_dragonrace(string race, string clas, string sub) {
  if (race == "q" || race == "quit") {
    write("Goodbye.");
    return;
  }
  if (!RACE_D->is_race(race)) {
    showerror("You did not select an appropriate race.  Try again.");
    input_to("ask_dragonrace", clas, sub);
    return;
  }
  tp->set_remort_race(race);
  remort_character(clas, sub);
}
void remort_character(string clas, string sub)
{
  string tmp=sub;
  int *info=(int *)this_player()->query_property("last remort");
  int howmany=0;
  int newtitle=0;
  int nextreboot = EVENTS_D->query_next_reboot();
  string startroom=tp->query_env("start");
  object *obs;
  obs = filter(all_inventory(tp), (: $1->query_worn() || $1->query_wielded() :) );
  obs->set_theft(1);
  obs->unequip();
  obs->set_theft(0);
  if (tp->query_invis()) tp->set_invis(0);
  if (member_array(sub, DRAGON_SUBS) != -1) tmp=sub+" dragon";
  write("%^GREEN%^%^BOLD%^Your mind begins to cloud as you change into a "+tmp+".");
  if (sizeof(tp->query_remort_data()) && member_array(sub, keys(tp->query_remort_data())) == -1) newtitle=1;
  this_player()->remort(clas, sub);
  //    this_player()->remove_property("last remort time");
  //    this_player()->set_property("last remort time", time() );
  if (sizeof(info) && info[0] == nextreboot) howmany = info[1];
  this_player()->remove_property("last remort");
  this_player()->set_property("last remort", ({nextreboot,howmany+1}) );
  this_player()->update_channels();
  this_player()->init_path();
  tp->setenv("TITLE", ADVANCE_D->get_new_title(tp));
  if (regexp(startroom, "fighter|mage|rogue|clergy|wanderer|dragon"))
    tp->set_primary_start("/d/nopk/tirun/square");
  tp->force_me("save");
}

int ok_remort(string what, string sub) {
  switch(what) {
  case "archangel":
    switch(sub) {
      //        case "thug": case "thief": case "assassin": case "scout":
    case "kataan": case "antipaladin": case "necromancer":
      return 0;
    default:
      return 1;
    }
    break;
  case "demon":
    switch(sub) {
    case "cleric": case "druid": case "paladin":
      return 0;
    default:
      return 1;
    }
    break;
  }
  return 1;
}

void help()
{
  message("help",
   "Syntax: <remort>\n"
   "        <remort list>\n"
   "        <remort show [subclass]>\n\n"
   "This command allows you to save your current character information "
   "and change to another subclass. Skills, stats, level and current exp "
   "are saved for your current subclass. You can only use this in Tirun."
   " You must be at least level 50 to use remort the first time.",
   this_player() );
}

