
#include <std.h>
#include <daemons.h>

#define FAIL(s) return notify_fail(strip_color(s)+"\n")
#define CAP(s) capitalize(strip_color(s))

inherit DAEMON;

int unlock_bag(string);
int unlock_door(string);

void help() {
  message("help",
    "Syntax: <unlock container [with key]>\n"
    "        <unlock door [with key]>\n\n"
    "This lets you unlock a locked container. You can also unlock doors. "
    "Most will require a specific key.",
    this_player() );
}

int cmd_unlock(string str) {
  object tp = this_player();
  object env = environment(tp);
  int ret;

  if (str && sizeof(env->query_doors())) ret = unlock_door(str);
  if (!ret) return unlock_bag(str);
  return ret;
}

int unlock_door(string str) {
  object tp = this_player();
  object env = environment(tp);
  string *doors;
  string keyname;
  object key;
  int fail = 0;

  if (!str) FAIL("Unlock what?");

  if (sscanf(str, "%s with %s", str, keyname) != 2)
    fail = 1;

  str = remove_article(str);

  doors = env->query_doors_blocking_exit(str);
  if (!sizeof(doors)) doors = ({ env->query_door_id(str) });

  doors = filter(doors, (: ($1 != 0) :) );

  if (sizeof(doors) && fail) { 
    message("cmd_unlock", "Unlock it with what?", tp);
    return 1;
  }
  else
    FAIL("There is no "+str+" here.");

  keyname = remove_article(keyname);

  if (!(key = present(keyname, tp)))
    FAIL("You do not have "+indefinite_article(keyname)+".");

  foreach (string id in doors)
    env->event_unlock(tp, id, key);

  return 1;
}

int unlock_bag(string str) {
  object tp=this_player();
  object env=environment(tp);
  object bag, key;
  string bagstr, keystr, keyid;
  string bagshort, keyshort, with;

  if (!str || str == "")
    FAIL("Unlock what?");

  if (sscanf(str, "%s with %s", bagstr, keystr) == 2) {
    key = present(keystr, tp);
    if (!key)
      FAIL("You do not have "+keystr+".");
    keyshort = " with "+key->query_short();
  }
  else
    bagstr = str;

  bag = present(bagstr, tp);
  if (!bag)
    bag = present(bagstr, env);
  if (!bag)
    FAIL("There is no "+bagstr+" here.");

  bagshort = bag->query_short();

  if (!bag->query_can_lock())
    FAIL(CAP(bagshort)+" does not have a lock.");
  
  if (!bag->query_locked())
    FAIL(CAP(bagshort)+" is not locked.");

  if (keyid=bag->query_key()) {
    
    if (!key)
      FAIL("Unlock "+bagshort+" with what?");
    
    if (!key->id(keyid) && !key->id(DOOR_D->query_master_key())) {
      message("cmd_unlock", "You try to unlock "+bagshort+
        keyshort+", but it doesn't fit.", tp);
      message("cmd_unlock", tp->query_cap_name()+" tries to unlock "+
        bagshort+keyshort+", but fails.", env, tp);
      return 1;
    }
    
  }

  bag->set_locked(0);

  message("cmd_unlock", "You unlock "+bagshort+keyshort+".", tp);
  message("cmd_unlock", tp->query_cap_name()+" unlocks "+bagshort+keyshort+".", env, tp);

  return 1;
}

