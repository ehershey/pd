/*
// This file is part of the TMI distribution mudlib.
// Please include this header if you use the code here.
// Originally written by Brian Leet.
// Adapted by Sulam (12-13-91)
// Help added by Brian (1/28/92)  *smirk*
// Better messages added by Brian (2/5/92)
// Light checking added by Hanse 4/11/92  :P
// Ehh did consolidating -- seeker 2/16/2001 (finally.... done)
*/

#include "move.h"
#include <std.h>
#include <daemons.h>

inherit DAEMON;
#define MAX_PICKUP 1000
int help();


int _consolidate(string name, int cnt)
{
   object *ret_ob;
   int res, i, a, b;
   string type, *curr;

    ret_ob = CONSOLIDATE_D->do_consolidate_cmd(environment(this_player()), name,cnt);
    if (ret_ob==({}))
    return notify_fail("What "+name+"?\n");
    type = ret_ob[0]->query_short();
    i = sizeof(ret_ob);
    for(a=0; a<i; a++) {
    if (ret_ob[a]->query_prevent_get())
       return notify_fail(ret_ob[a]->query_prevent_get()+"\n");
    if (!ret_ob[a]->get())
       return notify_fail("You cannot pick that up.");
    if (ret_ob[a]->is_money_pile()) {
        b = sizeof( curr = ret_ob[a]->query_currencies());
        while(b--) {
            write("You find "+(res=ret_ob[a]->query_money(curr[b]))+" "+curr[b]+" "+
            (res>1?"coins":"coin")+" in the pile.");
            this_player()->add_money(curr[b], res);
        }
        ret_ob[a]->remove();
    }
    if (!ret_ob[a])
        continue;
    res = ret_ob[a]->move(this_player());
    switch(res) {
        case MOVE_OK: break;
        case MOVE_NOT_ALLOWED:
            write("You cannot do that.");
            return 1;
            break;
        case MOVE_NO_ROOM:
            if (!a) { write("You cannot carry that much."); return 1; }
            if (a==1) {
              write("You take "+ret_ob[a-1]->query_short());
              message("info", this_player()->query_cap_name()+" takes "+ret_ob[a-1]->query_short()+".", environment(this_player()), ({ this_player() }));
              write("You cannot carry anymore.");
              return 0;
            }
              type = pluralize(ret_ob[a-1]->query_short());
              write("You take "+cardinal(a)+" "+type+".");

              message( "info", this_player()->query_cap_name()+" takes "+ cardinal(a)+" "+type+".", environment(this_player()), ({ this_player() }));
              write("You cannot carry anymore.");
              return 0;
            }
          }
              if (a==1) {
                write("You take "+ret_ob[a-1]->query_short());
                message("info", this_player()->query_cap_name()+" takes "+
                       ret_ob[a-1]->query_short()+".", environment(this_player()), ({ this_player() }));
                return 1;
               }

          type = pluralize(ret_ob[a-1]->query_short());
          write("You take "+cardinal(a)+" "+type+".");
          message("info", this_player()->query_cap_name()+" takes "+cardinal(a)+" "+type+".", environment(this_player()), ({this_player()}));
          return 1;
}

int cmd_get(string str) {
   object ob, *inv;
   string *org, *curr; 
   int res, i,  b;
   string tmp, type, tmp2;
   int ammount;
   
    if(this_player()->query_ghost()) {
        notify_fail("You cannot do that in your immaterial state.\n");
        return 0;
    }
    if (!str) {
        return help();
    }
    if(effective_light(this_player()) < -6) {
        notify_fail("It is too dark.\n");
        return 0;
    }
    if ( (sscanf(str, "%s %s", tmp, type)==2) &&
         ((strsrch(str, "coins")==-1)&&(strsrch(str,"coin")==-1)))
        {
        if (tmp=="all") 
            if (!_consolidate(type, MAX_PICKUP))
                return 0;
            else
                return 1;

          if (!_consolidate(type, atoi(tmp))) return 0;
          return 1;
        }
      if (str == "all")
        {
         inv = all_inventory ( environment( this_player() ) );
         if (!inv) return notify_fail("There is nothing to pickup!");
         org = ({});
         for(i=0; i<sizeof(inv); i++) {
          if (inv[i]->is_living()) continue;
            if (inv[i]->query_prevent_get()) continue;
          if (inv[i]->is_money_pile()) {
         b = sizeof( curr = inv[i]->query_currencies());
         while(b--) {
          write("You find "+(res=inv[i]->query_money(curr[b]))+" "+curr[b]+" "+
          (res>1?"coins":"coin")+" in the pile.");
          this_player()->add_money(curr[b], res);
          
       }
         inv[i]->remove();
         continue;
       }
          if (sizeof(inv[i]->query_id())) {
          if (member_array(inv[i]->query_id()[0], org)==-1)
            org += ({ inv[i]->query_id()[0] });
         } 
      }
         for(i=0; i<sizeof(org); i++) {
           if (!_consolidate(pluralize(org[i]), MAX_PICKUP)) return 1;     
         }
         return 1;
        }       
  if ( (sscanf(str, "%s %s %s", tmp2, type, tmp) > 1 ))
  if ( (tmp == "coins") || (tmp == "coin") ) {
   if (tmp2!="all") ammount = atoi(tmp2);
   type = lower_case(type);
   if(ammount < 1 && tmp2!="all") {
      notify_fail("You can only take positive ammounts of coins.\n");
      return 0;
   }
   ob = present("coins", environment(this_player()));
   if (tmp2=="all") ammount = ob->query_money(type);
   if(!ob || ob->query_money(type) < ammount) {
      notify_fail("I don't see that much "+type+" here.\n");
      return 0;
   }
   this_player()->add_money(type, ammount);
   ob->add_money(type, -ammount);
   if((int)ob->query_total_money() == 0)
      destruct(ob);
   write("You put " + ammount + " " + type + " pieces into your purse.");
   say(this_player()->query_cap_name() + " takes some " + type + ".");
   return 1;
}
  if (!_consolidate(str, 1)) return 0; else return 1;
}

int
help() {
  write("Command: get\nSyntax: get <item | all>\n"+
        "This command will have your character try to pick up the\n"+
        "item specified, or if all is typed, it will make your\n"+
        "character try to pick up everything in the room.\n");
  return 1;
}

/* EOF */
