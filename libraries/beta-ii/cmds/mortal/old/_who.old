//      /bin/mortal/_who.c
//      from the Nightmare Mudlib
//      lists users() in an interesting format and sorting order
//      created by Descartes of Borg 03 july 1993
//      redesigned by Kalinash 12 Jan 94
//      redesigned again by Seeker Feb 2000
//      and again by Nightshade Nov 2001

#include <std.h>
#include <daemons.h>
 
#define DEFAULT_SORT "l";
 
inherit DAEMON;
#define GR "%^RESET%^%^BLUE%^"
#define BO "%^RESET%^%^GREEN%^"
string list_users(string *races, string order);
 
int cmd_who(string str) {
    string *args, *races;
    string order;
    int i;
 
    races = ({});
    order = DEFAULT_SORT;
    if(str) {
        i = sizeof(args = explode(str, " "));
        while(i--) {
            if(args[i][0] == '-' && strlen(args[i]) > 1) order = args[i][1..1];
            else if(RACE_D->is_race(args[i])) races += ({ args[i] });
        }
   }
     if (this_player()->is_pueblo()) message("PLAIN-HTML", "<pre>", this_player());
     this_player()->more(explode(list_users(races, order), "\n"));
     if (this_player()->is_pueblo()) message("PLAIN-HTML", "</pre>", this_player());
    return 1;
}
 
string list_users(string *races, string order) {
   object *who, *ims, *pls, *adm;
     string tmp, titl, mark, borg;
    int i, max, x;
    ims = ({});
    pls = ({});
    who = filter_array(users(), "which_users", this_object(), races);
    for(x=0;x<sizeof(who);x++) {
        if (archp(who[x]))
          if (!adm) adm = ({ who[x] }); else adm += ({ who[x] });
        else if(wizardp(who[x]))
          if (!ims) ims = ({ who[x] }); else ims += ({ who[x] });
        else 
          if(!pls) pls = ({who[x]}); else pls += ({ who[x] });
    }
    switch(order) {
        case "a":
            pls = sort_array(pls, "sort_by_name", this_object());
            break;
        case "b":
            pls = sort_array(pls, "sort_by_birth", this_object());
            break;
        case "d":
            pls = sort_array(pls, "sort_by_deaths", this_object());
            break;
        case "k":
            pls = sort_array(pls, "sort_by_kills", this_object());
            break;
        case "l":
            pls = sort_array(pls, "sort_by_level", this_object());
            break;
        case "p":
            pls = sort_array(pls, "sort_by_playing_time", this_object());
            break;
        case "q":
            pls = sort_array(pls, "sort_by_quests", this_object());
            break;
        case "t":
            pls = sort_array(pls, "sort_by_login_time", this_object());
            break;
        default:
            pls = sort_array(pls, "sort_by_level", this_object());
            break;
    }

borg =  "%^BLUE%^";
borg += "+=+=+=+=+=+=+=+=+=+=+=+=+=+=+";
borg += "%^BOLD%^(%^WHITE%^ ";
borg += "Primal Darkness";
borg += " %^BLUE%^)%^RESET%^%^BLUE%^";
borg += "=+=+=+=+=+=+=+=+=+=+=+=+=+=+=\n";
    max = sizeof(adm);
    if(max)
        for(i=0; i<max; i++) {
            tmp = "[Admin]    ";
            if((string)adm[i]->query_title())
                tmp+= (string)adm[i]->query_title();
            else
                tmp += "("+capitalize((string)adm[i]->query_name())+")";
            tmp = arrange_string(tmp, 55);
            borg += "%^BLUE%^%^BOLD%^"+tmp;
            tmp = capitalize((string)adm[i]->query_position());
            tmp = arrange_string(tmp, 13);
            tmp += "\n";
            borg += "%^RESET%^%^BOLD%^"+tmp;
    }
    max = sizeof(ims);
    if(max)
        for(i=0; i<max; i++) {
            tmp = "[%^BOLD%^Immortal%^RESET%^%^MAGENTA%^] ";
            if((string)ims[i]->query_title()) 
                tmp+= (string)ims[i]->query_title();
            else
                tmp += "("+capitalize((string)ims[i]->query_name())+")";
        tmp = arrange_string(tmp, 55);
        borg += "%^RESET%^%^MAGENTA%^"+tmp;
        tmp = capitalize((string)ims[i]->query_position());
        tmp = arrange_string(tmp, 13);
        tmp += "\n";
        borg += "%^RESET%^%^WHITE%^"+tmp;
    }
    max = sizeof(pls);
    if(max)
        for(i=0; i<max; i++) {
            tmp = GR+"["+BO+"Player"+GR+"]%^RESET%^%^CYAN%^";
            tmp = arrange_string(tmp, 11);
            borg += tmp;
            if((string)pls[i]->query_title()) {
                tmp = (string)pls[i]->query_title();
                tmp = arrange_string(tmp, 43);
            }
            else {
                tmp = "("+(string)pls[i]->query_cap_name()+")";
                tmp = arrange_string(tmp, 43);
            }
            borg += tmp;
            tmp=" %^RESET%^%^BOLD%^";
            if (pls[i]->query_race() == "dragon")
                tmp += capitalize((string)pls[i]->query_subclass());
            else
                tmp += capitalize((string)pls[i]->query_race());
            tmp = arrange_string(tmp+" %^CYAN%^", 12);
            if (pls[i]->query_race() == "dragon")
                tmp += capitalize((string)pls[i]->query_race());
            else
                tmp += capitalize((string)pls[i]->query_class());
            tmp = arrange_string(tmp, 25);
            borg += tmp+"%^RESET%^\n";
    }
    if (find_living("sigma") && environment(find_living("sigma")))
        borg += GR+"["+BO+"Mascot"+GR+"]%^RESET%^%^MAGENTA%^   Mascot Sigma the friendly bird                Dodo Bird\n";
    if (find_living("sigmatt") && environment(find_living("sigmatt")))
        borg += GR+"["+BO+"Mascot"+GR+"]%^RESET%^%^MAGENTA%^   Mascot Sigma the trick or treater            Dodo Bird\n";

borg += "%^BLUE%^=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=\n";

    return borg;
}
 
int which_users(object who, string *races) {
    string my_race;
    int i;
 
    if(!who->query_name()) return 0;
    if(who->query_invis() && wizardp(who) && !archp(this_player()))
      return 0;
    if (who->query_invis() && !wizardp(this_player())) 
       return 0;
     if(!(i=sizeof(races))) return 1;
   my_race = (string)who->query("race");
     while(i--) if(races[i]== my_race) return 1;
    return 0;
}
 
int sort_by_birth(object alpha, object beta) {
    int a, b;
 
    a = (int)alpha->query_birthday();
    b = (int)beta->query_birthday();
    if(a == b) return strcmp((string)alpha->query_name(),
(string)beta->query_name());
    else if(a > b) return 1;
    else return -1;
}
 
int sort_by_name(object alpha, object beta) {
    return strcmp((string)alpha->query_name(), (string)beta->query_name());
}
 
int sort_by_playing_time(object alpha, object beta) {
    int a, b;
 
    a = (int)alpha->query_age();
    b = (int)beta->query_age();
    if(a==b) return strcmp((string)alpha->query_name(),
(string)beta->query_name());
    else if(a > b) return -1;
    else return 1;
}
 
int sort_by_login_time(object alpha, object beta) {
    int a, b;
 
    a = (int)alpha->query_login_time();
    b = (int)beta->query_login_time();
    if(a==b) return strcmp((string)alpha->query_name(),
(string)beta->query_name());
    else if(a>b) return 1;
    else return -1;
}
 
int sort_by_level(object alpha, object beta) {
    int a, b;
 
    a = (int)alpha->query_level();
    b = (int)beta->query_level();
    if(a > b) return -1;
    if(b > a) return 1;
    a = wizardp(alpha);
    b = wizardp(beta);
    if( (a && b) || (!a && !b) )
      return strcmp((string)alpha->query_name(), (string)beta->query_name());
    if(a) return 1;
    return -1;
}
 
int sort_by_kills(object alpha, object beta) {
    int a, b;
 
    if((a=sizeof((string *)alpha->query_kills())) > (b=sizeof((string*)beta->query_kills())))
      return -1;
    else if(a < b) return 1;
    else return strcmp((string)alpha->query_name(), (string)beta->query_name());
}
 
int sort_by_deaths(object alpha, object beta) {
    int a, b;
 
    a = sizeof((mixed *)alpha->query_deaths());
    b = sizeof((mixed *)beta->query_deaths());
    if(a>b) return -1;
    else if(a<b) return 1;
    else return strcmp((string)alpha->query_name(), (string)beta->query_name());
}
 
int sort_by_quests(object alpha, object beta) {
    int a, b;
 
   if((a=(int)alpha->query_quest_points()) >
 (b=(int)beta->query_quest_points()))
      return -1;
    else if(a < b) return 1;
    else return strcmp((string)alpha->query_name(), (string)beta->query_name());
}
 
void help() {
    write(
      "Syntax: <who [-][abdklpqt] [race1 race2 ... raceN]>\n\n"+
      "Lists all players online or all players of the race(s) given.\n"+
      "If no arguments are given, it simply lists all players sorted by\n"
      "birthdate.\n" );
}
