#include <std.h>
#define FAIL(s) return notify_fail(s+"\n")

inherit DAEMON;

void help() {
  object tp = this_player();
  message("help",
    "Syntax: <eat [food]>\n\n"
    "Allows you to eat something. Food restores a bit of stamina and health when you eat it, "
    "and having some food in your belly can help you heal faster.",
    tp );
  if (tp->query_race() == "dragon" || tp->query_subclass() == "druid")
    message("help", "Dragons and some animals can eat their freshly killed prey.", tp);
}

int cmd_eat(string str) {
  object tp = this_player();
  object env = environment(tp);
  object food;
  string mymsg, yourmsg;
  int poison, disable, strength, uses;
  mixed extra;

  if (tp->query_busy()) FAIL("You are too busy to eat.");
  if (tp->query_ghost()) FAIL("The dead have no need of food.");
  if (tp->query_current_attacker()) FAIL("You are too busy fighting!");
  if (!str) FAIL("Eat what?");

  if ((tp->query_class() == "dragon" || tp->query("bear") || tp->query("lion") || tp->query("wolf")) &&
      objectp(food = present(str, env)) && food->query_corpse()) {
        strength = food->query_level()*(food->query_decay() ? 1 : 3)/2;
        disable = 1;
        uses = 1;
        poison = 0;
        extra = (: $(food)->loot($(tp)) :);
        mymsg = "You eat the remains of your prey.";
        yourmsg = tp->query_cap_name()+" eats the remains of "+tp->query_possessive()+" prey.";
  }
  else {
    food = present(str, tp);
    if (!food) FAIL("You have nothing by that name.");
    if (!food->is_food()) FAIL("That isn't edible.");

    strength = food->query_strength();
    disable = food->query_disable();
    uses = food->query_uses();
    poison = food->query_poison();
    extra = food->query_extra();

    mymsg = food->query_my_mess();
    yourmsg = food->query_your_mess();
  }

  if (tp->query_max_stuffed() - tp->query_stuffed() < strength) FAIL("You are too full!");

  message("info", mymsg, tp);
  message("info", yourmsg, env, tp);

  tp->add_hp(strength);
  tp->add_sp(strength);
  tp->add_mp(strength/2);
  tp->add_stuffed(strength);

  if (poison) tp->add_poisoned(poison);
  if (disable) tp->set_disable(disable);
  if (functionp(extra)) evaluate(extra);

  if (uses <= 1)
    food->remove();
  else
    food->set_uses(uses-1);

  return 1;
}
