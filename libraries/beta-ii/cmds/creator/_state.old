#include <std.h>
#include <str_fmt.h>
 
inherit DAEMON;
 
object tp;
 
void money_display();
void language_display();
 
int cmd_state(string str) {
   string name, title, classs, race, married, guild;
   int level, hp, max_hp, mp, max_mp, sp, max_sp, exp;

  if(this_player()->query_ghost()) {
        notify_fail("You cannot do that in an immaterial state.\n");
        return 0;
   }
   if (!(string)this_player()->query_race())
   {
    write("You can not use this command until you have picked a race.");
    return 1;
   }

   if(str) {
        notify_fail("See also <skills> and <stats>\n");
        return 0;
   }
   tp = this_player();

   name = (string)tp->query_cap_name();
   title = (string)tp->query_title();
   classs = (string)tp->query_class();
   race = (string)tp->query_race();
   level = (int)tp->query_level();
   exp = (int)tp->query_exp();
   hp = (int)tp->query_hp();
   max_hp = (int)tp->query_max_hp();
   mp = (int)tp->query_mp();
   max_mp = (int)tp->query_max_mp();
   sp = (int)tp->query_sp();
   max_sp = (int)tp->query_max_sp();
   married = (string)tp->query_married();
   guild = (string)tp->query_guild();
 
   if(!married) married = "none";
   if(!guild) guild = "none";
   if(!race) race = "undefined";
   if(!classs) classs = "none";
   printf("%s%s\n",
      arrange_string("%^BOLD%^%^BLUE%^Name: %^RESET%^"+name, 25),
      arrange_string("%^BOLD%^%^BLUE%^Title: %^RESET%^"+title, 25) );    
   printf("%s%s%s\n",
      arrange_string("%^BOLD%^%^BLUE%^Level: %^RESET%^"+level, 25),
      arrange_string("%^BOLD%^%^BLUE%^Class: %^RESET%^"+classs, 25),
      arrange_string("%^BOLD%^%^BLUE%^Race: %^RESET%^"+race,25) );
   printf("%s%s%s\n",
      arrange_string("%^BOLD%^%^BLUE%^Experience: %^RESET%^"+exp, 25),
      arrange_string("%^BOLD%^%^BLUE%^Alignment: %^RESET%^"+tp->query_alignment(),25),
      arrange_string("%^BOLD%^%^BLUE%^Sex: %^RESET%^"+(string)tp->query_gender(), 25) );
   printf("%s%s%s\n",
      arrange_string("%^BOLD%^%^BLUE%^Quest Completed: "+(int)tp->query_quest_points(), 25),
      arrange_string("%^BOLD%^%^BLUE%^Spouse: %^RESET%^"+married, 25),
      arrange_string("%^BOLD%^%^BLUE%^Guild: %^RESET%^"+guild, 25) );
   printf("%s%s\n",
      arrange_string("%^BOLD%^%^BLUE%^Carry: %^RESET%^"+tp->query_internal_encumbrance(), 25) ,
      arrange_string("%^BOLD%^%^BLUE%^Max Carry: %^RESET%^"+tp->query_max_internal_encumbrance(), 25) );
   printf("%s%s%s\n",
      arrange_string(hp+"/"+max_hp+" hp", 25),
      arrange_string(sp+"/"+max_sp+" sp", 25),
      arrange_string(mp+"/"+max_mp+" mp", 25) );
   money_display();
   language_display();
   return 1;
}

void language_display() {
  string *langs;
  string ret;
  int i, lsz;

}
 
void money_display() {
    string *currs;
    string borg;
    int i, tmp;
 
    currs = (string *)tp->query_currencies();
    if((!currs || !sizeof(currs)) ) {
        message("info", "No money.", this_player());
        return;
    }
    for(borg = "", i=0, tmp = sizeof(currs); i<tmp; i++) {
        borg += ((tp->query_money(currs[i]))+" "+currs[i]);
        if(i == tmp-1) borg +=(".\n");
        else if(tmp > 2 && i == tmp-2) borg += (", and ");
        else if(tmp == 2) borg +=(" and ");
        else borg +=(", ");
    }
    message("info", borg, this_player());
    return;
}
 


void help() {
    message("help",
      "Syntax: <stat [player]>\n\n"
      "Gives you vital information about a player or monster.", this_player());
}

