#include <daemons.h>
#include <std.h>
inherit DAEMON;

int abil();
int get_damage(object, object);
void Bmess(object, object, object);

int cmd_maul(string str) {
    object tp, ob, wep;
    int i, which, skip, attack;
    object *inv, *wield, *blunts;
    string what;    
    blunts = ({});

   	if (!abil())
      	return 0;

    tp = this_player();

    if(tp->query_ghost())
        return notify_fail("You emit a ghostly moan.\n");
    
    if (tp->query_disable())
        return notify_fail("You are too busy to perform that move!\n");
    
    if(environment(tp)->query_property("no attack"))
        return notify_fail("Some strange force prevents your attack.\n");
    
    if(tp->query_casting()) return notify_fail("You are casting a spell!");
    
    if(tp->query_sp() < 15) 
        return notify_fail("You are too tired!\n");
    
    if(!str) {
        ob = (object)tp->query_current_attacker();
        if(!ob) {
            return notify_fail("Who?\n");
        }
    }
    else {
        ob = present(str, environment(tp));
        if(!ob) {
            sscanf(str, "%s %d", what, which);
            inv = all_inventory(environment(tp));
            for(i=0, skip = 0; i<sizeof(inv) && !ob; i++) {
                if(inv[i]->id(what)) {
                    skip++;
                    if(skip == which) ob = inv[i];
                }
            }
            if(!ob) {
                notify_fail("No "+str+" here!\n");
                return 0;
            }
        }
    }
    
    if(!living(ob)) {
        notify_fail(ob->query_cap_name()+" is not a living thing!\n");
        return 0;
    }
    
    if(ob==tp)
        return notify_fail("Maul yourself?\n");

    if(ob->is_player() && !interactive(ob))
        return notify_fail("You cannot attack link-dead players.\n");

	if(!this_player()->kill_ob(ob))
        return notify_fail(ob->query_cap_name()+" can't be attacked by you yet.\n");
	
	wield = tp->query_wielded();
	
	if(!sizeof(wield))
        return notify_fail("You need a blunt to maul with!\n");
    
	i = sizeof(wield);
    while (i--) {
        if(wield[i]->query_type() == "blunt")
            blunts  += ({ wield[i] });
   	}
   	
	if(!sizeof(blunts) )    	
	    return notify_fail("You need blunt to maul with!\n");

	wep = blunts[0];
	i = sizeof(blunts);
	while(i--){
		if(blunts[i]->query_wc() > wep->query_wc())
			wep = blunts[i];
	}

	attack = get_damage(tp, ob);
    
    if(attack < 10) attack = 15 +random(5);

    attack = attack + (wep->query_wc()*2);

    Bmess(tp, ob, wep);

    ob->damage(attack);
    
    tp->add_sp(-(this_player()->query_skill("attack")/7 + (1+random(this_player()->query_stats("strength")/3))));
    
    tp->set_disable();
    
    return 1;
}

void Bmess(object tp, object ob, object wep)
{
	int blunt;
	
	blunt = tp->query_skill("blunt");
	
    write("%^BOLD%^You %^CYAN%^g%^BLUE%^r%^CYAN%^i%^BLUE%^p%^WHITE%^ your "
    	+wep->query_name()+
    	" %^RESET%^%^RED%^tightly%^BOLD%^%^WHITE%^ and %^CYAN%^s%^WHITE%^w%^CYAN%^i%^WHITE%^n%^CYAN%^g%^WHITE%^ it at "
    	+ob->query_cap_name()+
    	", %^RED%^m%^YELLOW%^a%^RED%^u%^YELLOW%^l%^RED%^i%^YELLOW%^n%^RED%^g%^WHITE%^ "
    	+ob->query_possessive()+
    	" "
    	+ob->return_target_limb()+
    	"!"
	);
	
	message("target", "%^BOLD%^"
		+tp->query_cap_name()+
		" %^CYAN%^s%^WHITE%^w%^CYAN%^i%^WHITE%^n%^CYAN%^g%^WHITE%^s "
		+tp->query_possessive()+
		" "
		+wep->query_name()+
		" at you, %^RED%^m%^YELLOW%^a%^RED%^u%^YELLOW%^l%^RED%^i%^YELLOW%^n%^RED%^g%^WHITE%^ your "
    	+ob->return_target_limb()+
    	"!"				
		,ob);
	
	message("room", "%^BOLD%^"
		+tp->query_cap_name()+
		" %^CYAN%^s%^WHITE%^w%^CYAN%^i%^WHITE%^n%^CYAN%^g%^WHITE%^s "
		+tp->query_possessive()+
		" "
		+wep->query_name()+
		" at "
		+ob->query_cap_name()+
		", %^RED%^m%^YELLOW%^a%^RED%^u%^YELLOW%^l%^RED%^i%^YELLOW%^n%^RED%^g%^WHITE%^ "
		+ob->query_possessive()+
    	" "
    	+ob->return_target_limb()+
    	"!"
		, environment(tp), ({tp,ob}));

}

int get_damage(object tp, object ob)
{
	string subskill = "valor";
	int attack = 0;
	int blunt;
	blunt = tp->query_skill("blunt");
	
	if(tp->query_subclass() == "paladin")
		subskill = "valor";
	if(tp->query_subclass() == "warrior")
		subskill = "discipline";	
	if(tp->query_subclass() == "ranger")
		subskill = "discipline";
	if(tp->query_subclass() == "berserker")
		subskill = "ferocity";
	if(tp->query_subclass() == "antipaladin")
		subskill = "ferocity";
		
	if(tp->query_level() < 10)
	{
    	attack = BALANCE2_D->get_Pdamage( tp, ob, 1, 
			({ "blunt", "attack", subskill }),
        	({ "dexterity", "strength", "strength" }), 
			({ "dexterity", "strength" }) );
		attack = attack * 1.1;
	    if(attack > 200) attack = 200 + tp->query_level();
	}
	if(tp->query_level() >= 10 && tp->query_level() < 20)	
	{
    	attack = BALANCE2_D->get_Pdamage( tp, ob, 1, 
			({ "blunt", "attack", subskill }),
        	({ "dexterity", "strength", "strength" }), 
			({ "dexterity", "strength" }) );
		attack = attack * 1.2;
	    if(attack > 200) attack = 200 + tp->query_level();
	}
	if(blunt >=100 && blunt < 140)	
	{
    	attack = BALANCE2_D->get_Pdamage( tp, ob, 2, 
			({ "blunt", "attack", subskill }),
        	({ "dexterity", "strength", "strength" }), 
			({ "dexterity", "strength" }) );
	}	
	if(blunt >= 140 && blunt < 190)	
	{
    	attack = BALANCE2_D->get_Pdamage( tp, ob, 2, 
			({ "blunt", "attack", subskill }),
        	({ "dexterity", "strength", "strength" }), 
			({ "dexterity", "strength" }) );
		attack = attack * 1.1;
	}
	if(blunt >= 190 && blunt < 250)	
	{
    	attack = BALANCE2_D->get_Pdamage( tp, ob, 2, 
			({ "blunt", "attack", subskill }),
        	({ "dexterity", "strength", "strength" }), 
			({ "dexterity", "strength" }) );
		attack = attack * 1.2;
	}
	if(blunt >= 250 && blunt < 325)	
	{
    	attack = BALANCE2_D->get_Pdamage( tp, ob, 2, 
			({ "blunt", "attack", subskill }),
        	({ "dexterity", "strength", "strength" }), 
			({ "dexterity", "strength" }) );
		attack = attack * 1.3;
	}
	if(blunt >= 325 && blunt < 500)	
	{
    	attack = BALANCE2_D->get_Pdamage( tp, ob, 2, 
			({ "blunt", "attack", subskill }),
        	({ "dexterity", "strength", "strength" }), 
			({ "dexterity", "strength" }) );
		attack = attack * 1.4;
	}
	if(blunt >= 500)	
	{
    	attack = BALANCE2_D->get_Pdamage( tp, ob, 2, 
			({ "blunt", "attack", subskill }),
        	({ "dexterity", "strength", "strength" }), 
			({ "dexterity", "strength" }) );
		attack = attack * 1.5;
	}
	
	tp->add_skill_points("attack", attack/20 + 2);
    tp->add_skill_points("blunt", attack/20 + 2);
    tp->add_skill_points(subskill, attack/20 + 2);

	return attack;
}

void help() {
    write("Syntax: <maul [(living)]>\n"
        "Someone skilled with blunt weapons can use that "
		"weapon to bring down a heavy blow on the target.\n");
}
int abil() {
    object tp;
    tp = this_player();
    if (!tp) return 0;
    if (tp->query_skill("attack") < 25) return 0;
    if (tp->query_skill("blunt") < 25) return 0;
    
    return 1;
}

