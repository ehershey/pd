#include <std.h>
inherit DAEMON;
mapping Mbear;
mapping Mfeline;
mapping Mbison;

int spell();

void create()
{
    Mbear = ([]);
    Mfeline = ([]);
    Mbison = ([]);
}

int query_waiting(object ob) { return Mbear[ob]; }

int cmd_resonate(string str) {
    object tp, ob;
    int i, time, amount, bear, feline, bison;
    string  party, type;
    object *inv, *per=({}), *play=({});
    
    if (!spell()) 
    {
      return 0;
    }
    
    tp = this_player();
    
    if (tp->query_casting()) 
		return notify_fail("You are already casting a spell!\n");
		
    if (tp->query_disable())
        return notify_fail("You are too busy to cast this spell.\n");
    
    tp->set_magic_round(1);
    
    if(!str)
		return notify_fail("You must specify a type of resonance.\n");	

	if(str == "the bear")
	{
		bear = 1;
	}
	else if(str == "the lion")
	{
		feline = 1;
	}
	else if(str == "the bison")
	{
		bison = 1;	
	}
	else
	{
		return notify_fail("You must specify a type of resonance!\n");	
	}

    if(environment(this_player())->query_property("no magic"))
        return notify_fail("Something seems to be blocking your spell.\n");

    if (this_player()->query_disable())
        return notify_fail("You are too busy.\n");

 	if (tp->query_party())
        party = tp->query_party();
    if(!party) party = "null_party";
    
    per = all_inventory(environment(tp));

    for(int x = 0; x < sizeof(per); x++)
    {
        if( per[x]->is_player() && per[x] != tp &&
            per[x]->query_party() == party && !per[x]->query_ghost())
        {
            play = play + ({ per[x] });
        }
    }
    
	if(!sizeof(play))
		return notify_fail("There is no one around to use this on!\n");
		
/*
    time = (tp->query_stats("wisdom")*4 + random(tp->query_stats("intelligence")*2));	
*/
    time = 20;

	if(bear)
	{		
		message("tp", "%^GREEN%^You call the %^BOLD%^e%^RESET%^%^GREEN%^s%^BOLD%^s%^RESET%^%^GREEN%^e%^BOLD%^n%^RESET%^%^GREEN%^c%^BOLD%^e%^RESET%^%^GREEN%^ of the %^RED%^b%^BOLD%^%^BLACK%^e%^RESET%^%^RED%^a%^BOLD%^%^BLACK%^r%^RESET%^%^GREEN%^ into the room!%^RESET%^", tp);
    	message("room", "%^GREEN%^The %^BOLD%^%^BLACK%^ghostly%^RESET%^%^GREEN%^ image of a %^RED%^b%^BOLD%^%^BLACK%^e%^RESET%^%^RED%^a%^BOLD%^%^BLACK%^r%^RESET%^%^GREEN%^ enters the room, and flys into the %^BOLD%^%^BLUE%^s%^WHITE%^k%^BLUE%^y%^RESET%^%^GREEN%^!%^RESET%^", environment(tp));
		call_out("bear_on", 4,time, play, tp);
	}
	if(feline)
	{		
		message("tp", "%^GREEN%^You call the %^BOLD%^e%^RESET%^%^GREEN%^s%^BOLD%^s%^RESET%^%^GREEN%^e%^BOLD%^n%^RESET%^%^GREEN%^c%^BOLD%^e%^RESET%^%^GREEN%^ of the %^CYAN%^l%^GREEN%^i%^CYAN%^o%^GREEN%^n into the room!%^RESET%^", tp);
    	message("room", "%^GREEN%^The %^BOLD%^%^BLACK%^ghostly%^RESET%^%^GREEN%^ image of a %^CYAN%^l%^GREEN%^i%^CYAN%^o%^GREEN%^n enters the room, and flys into the %^BOLD%^%^BLUE%^s%^WHITE%^k%^BLUE%^y%^RESET%^%^GREEN%^!%^RESET%^", environment(tp));
		call_out("lion_on", 4,time, play, tp);
	}	
	if(bison)
	{
		message("tp", "%^GREEN%^You call the %^BOLD%^e%^RESET%^%^GREEN%^s%^BOLD%^s%^RESET%^%^GREEN%^e%^BOLD%^n%^RESET%^%^GREEN%^c%^BOLD%^e%^RESET%^%^GREEN%^ of the %^ORANGE%^b%^WHITE%^i%^ORANGE%^s%^WHITE%^o%^ORANGE%^n%^GREEN%^ into the room!%^RESET%^", tp);
    	message("room", "%^GREEN%^The %^BOLD%^%^BLACK%^ghostly%^RESET%^%^GREEN%^ image of a %^ORANGE%^b%^WHITE%^i%^ORANGE%^s%^WHITE%^o%^ORANGE%^n%^GREEN%^ enters the room, and flys into the %^BOLD%^%^BLUE%^s%^WHITE%^k%^BLUE%^y%^RESET%^%^GREEN%^!%^RESET%^", environment(tp));
		call_out("bison_on", 4,time, play, tp);
	}		


    tp->set_disable();
    tp->add_skill_points("nature", time/20 + 2);
    tp->add_mp(-(tp->query_skill("nature")/5 + (1+random(tp->query_stats("wisdom")/3))));
    
    return 1;
}

void bison_on(int time, object *play, object tp)
{
	if(!play) return;
	for(int i = 0; i < sizeof(play); i++)

	{ 
		if(!play[i]) continue;
		if(!Mbison[play[i]])
		{
			play[i]->add_skill_bonus("defense", tp->query_base_skill("nature")/9, time);
    		play[i]->add_stat_bonus("constitution", tp->query_base_stats("wisdom")/6, time);
    		Mbison[play[i]] = time;
			message("room", "%^GREEN%^The %^ORANGE%^b%^WHITE%^i%^ORANGE%^s%^WHITE%^o%^ORANGE%^n%^GREEN%^ flys down and enters "+play[i]->query_cap_name()+"!%^RESET%^", environment(play[i]), play[i]);	
			message("target", "%^GREEN%^The %^ORANGE%^b%^WHITE%^i%^ORANGE%^s%^WHITE%^o%^ORANGE%^n%^GREEN%^ enters you!%^RESET%^", play[i]);
		}
	}
	call_out("bison_off",time, play);	
}

void bison_off(object *play)
{
	if(!play) return;
	for(int i = 0; i < sizeof(play); i++)
	{ 
		if(!play[i]) continue;
		map_delete(Mbison, play[i]);
		message("room", "%^GREEN%^The %^ORANGE%^b%^WHITE%^i%^ORANGE%^s%^WHITE%^o%^ORANGE%^n%^GREEN%^ leaves "+play[i]->query_cap_name()+"!%^RESET%^", environment(play[i]), play[i]);
		message("target", "%^GREEN%^The %^ORANGE%^b%^WHITE%^i%^ORANGE%^s%^WHITE%^o%^ORANGE%^n%^GREEN%^ leaves you!%^RESET%^", play[i]);
	}	
}

void lion_on(int time, object *play, object tp)
{
	if(!play) return;
	for(int i = 0; i < sizeof(play); i++)
	{ 
		if(!play[i]) continue;
		if(!Mfeline[play[i]])
		{
			play[i]->add_skill_bonus("melee", tp->query_base_skill("nature")/9, time);
    		play[i]->add_stat_bonus("dexterity", tp->query_base_stats("wisdom")/6, time);
    		Mfeline[play[i]] = time;
			message("room", "%^GREEN%^The %^CYAN%^l%^GREEN%^i%^CYAN%^o%^GREEN%^n flys down and enters "+play[i]->query_cap_name()+"!%^RESET%^", environment(play[i]), play[i]);	
			message("target", "%^GREEN%^The %^CYAN%^l%^GREEN%^i%^CYAN%^o%^GREEN%^n enters you!%^RESET%^", play[i]);
		}
	}
	call_out("lion_off",time, play);	
}

void lion_off(object *play)
{
	if(!play) return;
	for(int i = 0; i < sizeof(play); i++)
	{ 
		if(!play[i]) continue;
		map_delete(Mfeline, play[i]);
		message("room", "%^GREEN%^The %^CYAN%^l%^GREEN%^i%^CYAN%^o%^GREEN%^n leaves "+play[i]->query_cap_name()+"!%^RESET%^", environment(play[i]), play[i]);
		message("target", "%^GREEN%^The %^CYAN%^l%^GREEN%^i%^CYAN%^o%^GREEN%^n leaves you!%^RESET%^", play[i]);
	}	
}

void bear_on(int time, object *play, object tp)
{
	if(!play) return;
	if(!tp) return;
	for(int i = 0; i < sizeof(play); i++)
	{ 
		if(!play[i]) continue;
		if(!Mbear[play[i]])
		{
			play[i]->add_skill_bonus("attack", tp->query_base_skill("nature")/9, time);
    		play[i]->add_stat_bonus("strength", tp->query_base_stats("wisdom")/6, time);
    		Mbear[play[i]] = time;
			message("room", "%^GREEN%^The %^RED%^b%^BOLD%^%^BLACK%^e%^RESET%^%^RED%^a%^BOLD%^%^BLACK%^r%^RESET%^%^GREEN%^ flys down and enters "+play[i]->query_cap_name()+"!%^RESET%^", environment(play[i]), play[i]);	
			message("target", "%^GREEN%^The %^RED%^b%^BOLD%^%^BLACK%^e%^RESET%^%^RED%^a%^BOLD%^%^BLACK%^r%^RESET%^%^GREEN%^ enters you!%^RESET%^", play[i]);
		}
	}
	call_out("bear_off",time, play);
}

void bear_off(object *play)
{
	if(!play) return;
	for(int i = 0; i < sizeof(play); i++)
	{ 
		if(!play[i]) continue;
		map_delete(Mbear, play[i]);
		message("room", "%^GREEN%^The %^RED%^b%^BOLD%^%^BLACK%^e%^RESET%^%^RED%^a%^BOLD%^%^BLACK%^r%^RESET%^%^GREEN%^ leaves "+play[i]->query_cap_name()+"!%^RESET%^", environment(play[i]), play[i]);
		message("target", "%^GREEN%^The %^RED%^b%^BOLD%^%^BLACK%^e%^RESET%^%^RED%^a%^BOLD%^%^BLACK%^r%^RESET%^%^GREEN%^ leaves you!%^RESET%^", play[i]);
	}	
}

void help() {
        write("Syntax: <resonate [(type)]>\n"
        "Strong Druids can call the spirit of the bear, the lion, or the bison "
		"into those who have banded together with the Druid.\n");
}
int spell() {
   	object tp;
   	tp = this_player();

   	if (!tp) return 0;
if( !archp(tp) )
return 0;

   	if (tp->query_skill("nature") < 180) return 0;
   	if (tp->query_subclass() != "druid") return 0;
    
   	
	return 1;
}

