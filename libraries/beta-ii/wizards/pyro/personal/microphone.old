#include <std.h>

inherit MONSTER;

int noInvis, doFollow, isInvincible;
string micName;
object owner, following;

void create() {
  ::create();
  set_property("no monster", 1);
  set_race("microphone");
  set_body_type("demon");
  set_stats("charisma", 9999);
  set_name("microphone");
  set_id( ({"microphone"}) );
  set_level(1);
  set_class("fighter");
  set_subclass("berserker");
  set_stats("strength", 1);
  set_stats("dexterity", 1);
  set_stats("charisma", 99999);
  set_stats("constitution", 1);
  set_stats("intelligence", 1);
  set_stats("wisdom", 1);
  set_overall_ac(1);
  foreach (string sk in query_all_skills()) set_skill(sk, 1);
  set_max_hp(1);
  set_exp(0);
  micName = "*";
  noInvis = 0;
}

void init() {
  ::init();
  if(!query_invis() && !noInvis)
    set_invis(1, "Mic stealthed.", "");
}

void set_no_invis(int i) { noInvis = i; set_invis(!i, "Mic "+(i?"no longer ":"")+"stealthed.", ""); }

void toggle_follow() {
  doFollow = !doFollow;
  if(owner)
    receive_message("info", (doFollow?"Now ":"No longer ")+"following.");
}

void set_follow(object ob) {
  if(!ob) return;
  following = ob;
  doFollow = 1;
}

int is_invincible() { return isInvincible; }
void set_invincible(int i) { isInvincible = i; }

void heart_beat() {
  ::heart_beat();
  if(!doFollow || !following || !this_object()) return;
  if(following->is_room()) {
    if(environment(this_object()) != following)
      if(!this_object()->move(following) && owner) {
        this_object()->receive_message("info", "You have moved to "+file_name(environment(this_object())));
        this_object()->receive_message("info", environment(this_object())->describe_living_contents());
      }
  }
  else if (environment(following)) {
    if(!environment(this_object()) || !present(following, environment(this_object()))) {
      if(!this_object()->move(environment(following)) && owner) {
        this_object()->receive_message("info", "You have moved to "+file_name(environment(this_object())));
        this_object()->receive_message("info", environment(this_object())->describe_living_contents());
      }
    }
  }
}

string query_microphone_name() { return micName; }
void set_microphone_name(string name) { micName = name; }

object query_owner() { return owner; }
void set_owner(object ob) { owner = ob; }

void receive_message(mixed type, mixed message) {
  ::receive_message(type, message);
  if(!owner) return;
  if(owner == environment(this_object())) return;
  message("info", "%^BOLD%^%^CYAN%^~%^RESET%^%^GREEN%^"
    +query_microphone_name()+"%^BOLD%^%^CYAN%^~%^RESET%^ "
    +message, owner);
}

int remove() {
  receive_message("info", "Microphone object deleted.");
  return ::remove();
}

varargs void die(object killer) {
  receive_message("info", "Died"
    +(environment(this_object())?(" in "+file_name(environment(this_object()))):"")
    +(killer?(" to "+(killer->is_player()?capitalize(killer->query_name()):file_name(killer))):"")+".");
  return ::die(killer);
}
