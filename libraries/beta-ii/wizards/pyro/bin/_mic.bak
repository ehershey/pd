#include <std.h>

inherit DAEMON;

object mic;

int copy_object(object);
int become_object(object);
int do_command(string command, string str);

int cmd_mic(string str) {
  if(!str) {
    write("You currently do "+(mic?"":"not ")+"have a mic.");
    if(mic) write(file_name(mic));
    return 1;
  }
  if(str == "off") {
    if(!mic) return notify_fail("You do not have a mic.\n");
    if(!mic->query_invis() && environment(mic))
      message("info", mic->query_cap_name()+" fades away.", environment(mic));
    mic->remove();
    return 1;
  }
  if(!mic) {
    object to = get_object(str);
    if(!to) return notify_fail("Could not find "+str+"\n");
    if(!become_object(0)) return;  //Become microphone template
    mic->set_follow(to);
    mic->set_owner(this_player());
    return 1;
  }
  if(str[0..0] == ":") {
    string command;
    if(sscanf(str, ":%s %s", command, str) != 2) {
      command = str[1..<1];
      str = 0;
    }
    return do_command(command, str);
  }
  mic->force_me("say "+str);
  return 1;
}

int copy_object(object ob) {
  string *ids = ({ });
  if(!mic) return;
  if(!ob) return notify_fail("Could not find object.\n");
  mic->set_short(ob->query_short());
  mic->set_disguised_long(ob->query_long());
  if(ob->is_living()) {
    mic->set_name(ob->query_name());
    mic->set_gender(ob->query_gender());
    mic->set_race(ob->query_race());
    mic->set_body_type(ob->query_race());
    mic->set_class(ob->query_class());
    mic->set_subclass(ob->query_subclass());
    mic->set_id( ({ ob->query_id(), ob->query_name(), "microphone", "mic", "fake", "doppleganger" }) );
  }
  else {
    mic->set_name(ob->query_short());
    mic->set_gender("neuter");
    if(ob->query_short())  ids += explode(strip_color(ob->query_short()), " ");
    ids += ({ strip_color(ob->query_short()) });
    ids = map(ids, (:lower_case($1):));
    mic->set_id(ids);
  }
  return 1;
}

int become_object(object ob) {
  string file, filename;
  mixed ret;

  if(mic) mic->remove();
  if(!ob) {
    mic = new("/wizards/pyro/personal/microphone");
    if(!mic) return notify_fail("Microphone template not found.\n");
    copy_object(this_player());
    return 1;
  }

  file = ""
    +"#include <std.h>\n"
    +"inherit \""+file_name(ob)+"\";\n"
    +"#include \"/wizards/pyro/personal/mic.h\"\n"
    +"void create() { ::create(); noInvis = 0; micName = \"*\"; }\n";

  filename = path_file(file_name(this_object()))[0]+"/MIC_EXPLODE_TEMP.c";
  rm( filename );
  if( ret = find_object( filename ) ) destruct( ret );
  write_file( filename, file );
  if(!load_object(filename)) return notify_fail("Error loading file.\n");
  mic = new(filename);
  rm( filename );

  mic->set_no_invis(1);
  return 1;
}

int do_command(string command, string str) {
  if(command == "look") {
    return "/wizards/pyro/bin/_find.c"->do_find(mic);
  }
  if(command == "die") {
    mic->die();
    return 1;
  }
  if(command == "follow") {
    object toFollow = get_object(str);
    if(!str) {
      mic->toggle_follow();
      return 1;
    }
    if(!toFollow)
      return notify_fail("Could not find object "+str+" to follow.\n");
    mic->set_follow(toFollow);
    return 1;
  }

  //all commands below this line require a parameter
  if(!str) return notify_fail("Command <"+command+"> does not exist.\n");

  if(command == "copy") {
    return copy_object(get_object(str));
  }
  if(command == "name") {
    mic->set_microphone_name(str);
    return 1;
  }
  if(command == "force") {
    if(str == "l" || str == "look")
      return do_command("look", 0);
    mic->force_me(str);
    return 1;
  }
  if(command == "relay") {
    if(str == "on") {
      mic->set_owner(this_player());
    }
    else if(str == "off") {
      mic->set_owner(0);
    }
    else {
      mic->set_owner(get_object(str));
    }
    return 1;
  }
  if(command == "invis") {
    if(str == "on") {
      mic->set_no_invis(0);
      mic->set_invis(1);
    }
    else if(str == "off") {
      mic->set_no_invis(1);
      mic->set_invis(0);
    }
    else return notify_fail("Syntax: mic :invis [on|off]\n");
    return 1;
  }
  if(command == "become") {
    object follow = mic->query_follow();
    object owner = mic->query_owner();
    object ob = get_object(str);
    object env = environment(mic);
    if(!ob) return notify_fail("Could not find "+str+".\n");
    if(!ob->is_living()) return notify_fail("That is not alive.\n");
    if(ob->is_player()) return notify_fail("Cannot become players.\n");
    become_object(ob);
    mic->set_follow(follow);
    mic->set_owner(owner);
    if(env) mic->move(env);
    return 1;
  }

  return notify_fail("Command <"+command+"> ["+str+"] does not exist.\n");
}
