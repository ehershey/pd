#include <std.h>

inherit OBJECT;

int uses = 8;
int slices = 0;

mapping slices;

void create() {
    ::create();
    slices = ([]);
    set_name("pumpkin");
    set("id", ({"pie", "pumpkin pie"}) );
     set_short("homemade pumpkin pie");
set_long("Luna's homemade, mouthwatering, delicious pumpkin pie. Take a slice and enjoy.");
 set_prevent_get("Don't be greedy! Take a slice.");
}

void init() {
    ::init();
    add_action("cmd_take", "take");
    add_action("cmd_eat", "eat");   
}

int cmd_take(string str) {
    object ob;   
    if (!str || str != "slice") 
	return notify_fail("That is not here.\n");

    if (slices[this_player()->query_name()] >= 2)
	return notify_fail("You have to wait for reboot to take another slice.\n");

    ob = new("/std/object");
    ob->set_name("slice of pie");
    ob->set("id", ({"slice", "pie slice", "pumpkin pie"}) );
    ob->set_short("slice of pumpkin pie");
    ob->set_long("This is a slice of pumpkin pie.");
    message("info", "You take a slice of the pie.", this_player());
    slices[this_player()->query_name()]++;
    ob->move(this_player());
    say(this_player()->query_cap_name()+" takes a slice of the pie.");

    return 1;
}

int cmd_eat(string str) {
    if (!str || str != "pie")
	return notify_fail("You can't eat that.\n");
    if (!present("slice", this_player())) 
	return notify_fail("You don't have a slice of pie.\n");
    message("info", "You eat the pie and feel refreshed.", this_player());
    say(this_player()->query_cap_name()+" eats a slice of pie.");
    this_player()->add_hp(this_player()->query_max_hp(this_player()->query_hp()));
    this_player()->add_sp(this_player()->query_max_sp(this_player()->query_sp()));
    this_player()->add_mp(this_player()->query_max_mp(this_player()->query_mp()));
    uses--;
    if (uses <= 0) 
        this_object()->remove();
        message("info", "The pie is all gone.", this_player());
    return 1;
}

int query_auto_load() {
    if (wizardp(this_player())) return 1;
}
