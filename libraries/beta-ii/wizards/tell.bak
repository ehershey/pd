#include <std.h>
#include <daemons.h>
#include <tell.h>
inherit DAEMON;
string query_cap(object ob)
{
 if (!wizardp(ob))
   return capitalize(ob->query_name());
 return ob->query_cap_name();
}
int cmd_tell(string str) {
    string *words;
    mixed mud;
    object ob;
    int i, maxi;
    string who, msg, tmp;
    if(!str) return notify_fail("Syntax: <tell [who] [message]>\n");
    if((sscanf(str, "%s ", who) == 1) && (who == "salox"))
      if("/adm/daemon/shutdown_d"->query_time_remaining()) {
        if(this_player()->query_race() == "unborn") return notify_fail("%^CYAN%^Salox says: %^RESET%^You must be born, first!\n");
        write("You are magically teleported to the shop.");
        say(this_player()->query_cap_name()+" is whisked away to the shop.");
        this_player()->move("/d/tirun/supply");
        say(this_player()->query_cap_name()+" appears from nowhere.");
        this_player()->describe_current_room(1);
        return 1;
      }
    mud = 0;
    if((maxi=sizeof(words = explode(str, "@"))) > 1) {
        who = convert_name(words[0]);
        if(maxi > 2) words[1] = implode(words[1..maxi-1], "@");
        maxi = sizeof(words = explode(words[1], " "));
        for(i=0; i<maxi; i++) {
            tmp = lower_case(implode(words[0..i], "."));
            if((int)NETWORK_D->mud_exists(tmp)) {
                mud = tmp;
                if(i+1 < maxi) msg = implode(words[i+1..maxi-1], " ");
                else msg = "";
                break;
            }
        }
        if(msg == "") return notify_fail("Syntax: <tell [who] [message]>\n");
        if(!mud) mud = -1;
    }
    if(!mud || mud == -1) {
        maxi = sizeof(words = explode(str, " "));
        who = 0;
        for(i=0; i<maxi; i++) {
            if(ob=find_living(tmp=convert_name(implode(words[0..i], " ")))) {
                who = tmp;
                if(i+1 < maxi) msg = implode(words[i+1..maxi-1], " ");
                else msg = "";
                break;
            }
        }
        if(!who) {
            if(!mud) return notify_fail("Tell whom what?\n");
            else return notify_fail(mud_name()+" is not aware of that mud.\n");
        }
        if(msg == "") return notify_fail("What do you wish to tell?\n");
    }
    else 
      { 
       SERVICES_D->send_gtell(mud, who, msg);
/*     
    LAST_D->add_tell((string)this_player()->query_name(),
    "%^BOLD%^%^RED%^You tell "+(string)capitalize(who)+"@"+(string)NETWORK_D->query_real_name(mud)+":%^RESET%^ "
    + msg);
*/
     return 1;
      }
    if(ob) {
        string frm;
        if(archp(ob)) frm = query_cap(this_player());
        else frm = (string)query_cap(this_player());
        message("tell", frm + " tells you: "+msg, ob);
        if((int)ob->query_invis(this_player()) || hiddenp(ob)) {
            ob->set_rproperty("reply",(string)this_player()->query_name());
            message("error", "Tell whom what?", this_player());
            return 1;
        }
        else if(userp(ob) && !interactive(ob))
          message("my_action", (string)query_cap(ob)+
            " is net-dead.", this_player());
        else if(userp(ob) && (query_idle(ob) > 60))
          message("my_action", (string)query_cap(ob)+
            " is idle and may not have been paying attention.", this_player());
        else if((int)ob->query_blocked("tell")) {
            message("my_action", (string)query_cap(ob)+" is blocking "+
            "all tells.", this_player());
            return 1;
        }
       if(ob->query_ignoring(this_player()->query_name())) {
      write("They are ignoring you.\n"); return 1; }
        else if(in_edit(ob) || in_input(ob))
          message("my_action", (string)query_cap(ob)+" is in input "+
            "and may not be able to respond.", this_player());
          else     if(file_size("/wizards/"+ob->query_name()+"/.tellblock") >= 0)
        message("my_action", "\n"+read_file("/wizards/"+ob->query_name()+"/.tellblock"), this_player());
        message("my_action", "%^RED%^%^BOLD%^You tell "+(string)query_cap(ob)+
          ":%^RESET%^ "+msg, this_player());
//        ob->set_property("reply", (string)this_player()->query_name());
    LAST_D->add_tell((string)ob->query_name(),
     "%^BOLD%^%^RED%^"+(string)query_cap(this_player()) + " tells you:"
     "%^RESET%^"+msg);
    ob->set("reply", (string)this_player()->query_name());
   
    LAST_D->add_tell((string)this_player()->query_name(),
    "%^BOLD%^%^RED%^You tell "+(string)query_cap(ob)+":%^RESET%^ "+  msg
);
    }
    return 1;
}
void help() {
    message("help",
      "Syntax: <tell [player] [message]>\n"
      "        <tell [player]@[mud] [message]>\n\n"
      "Sends the message to the player named either on this mud if no "
      "mud is specified, or to the player named on another mud when "
      "another mud is specified.\n\n"
      "See also: say, shout, yell, emote", this_player()
    );
}
