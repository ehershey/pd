
#include <std.h>
#include <daemons.h>

inherit DAEMON;

#define TRIVIA_END "__end_of_game__"
#define BAIL(s) return notify_fail(s);
#define DISPUTE_FILE "/tmp/trivia_disputes"

string *trivcmds = ({"start", "q", "a", "dispute", "status", "end", "help"});
mapping players;
object imm;
int *questions;
int *answered;
int currentq;
int playing;
int lasttime;

int triv_start(string opt);
int triv_q(string opt);
int triv_a(string opt);
int triv_status(string opt);
int triv_end(string opt);
int triv_help(string opt);
int sort_scores(string str1, string str2);
void trivia_line(string str);
void clear_vars();
void do_end();
void check_timeout();


void check_timeout() {
  if (!playing) return;
  
  if (time()-lasttime > 60*30) {
    trivia_line("Game timed out after 30 minutes idle.");
    do_end();
  }
  else
    call_out("check_timeout", 60*2);
}


void clear_vars() {
  players=([]);
  questions=({});
  answered=({});
  imm=0;
  currentq=0;
  playing=0;
  lasttime=time();
}


int cmd_triv(string str) {

  string cmd, opt;
  string *ex;

  if (playing) {
    if (imm && this_player() != imm) {
      BAIL("The game is being run by "+imm->query_cap_name()+".\n");
    }
    else {
      lasttime=time();
    }
  }
  
  if (!str)
    BAIL("Triv commands: "+implode(trivcmds," ")+"\n");

  ex=explode(str," ");
  cmd=ex[0];
  opt=implode(ex[1..]," ");

  if (!cmd || member_array(cmd,trivcmds) == -1)
    BAIL("Triv commands: "+implode(trivcmds," ")+"\n");

  return call_other(this_object(),"triv_"+cmd,opt);
}


int triv_help(string opt) {
  
  message("trivia",
    "triv start player1 player2 player3...   (Starts a game)\n"+
    "triv q Question here??   (Asks a question)\n"+
    "triv a playername Answer here   (Awards point + shows answer to everyone)\n"+
    "triv status   (Shows game status to everyone)\n"+
    "triv dispute Notes here   (Logs last question for review + removes last point)\n"+
    "triv end   (End the game)\n",

    this_player());

  return 1;
}


int triv_start(string opt) {

  string *p;
  int i;

  if (playing)
    BAIL("There is already a game in progress.\n");

  if (replace_string(opt," ","") == "")
    BAIL("No players specified.\n");

  clear_vars();

  p=explode(replace_string(lower_case(opt),","," ")," ");
  for (i=0;i<sizeof(p);i++) {
    if (p[i] != "") players[p[i]]=0;
  }

  trivia_line("Game started.");

  playing=1;

  imm=this_player();

  check_timeout();

  return 1;
}


int triv_q(string opt) {

  if (!playing)
    BAIL("The game has not been started.\n");

  if (sizeof(questions) > sizeof(answered))
    BAIL("The last question has not been answered yet.\n");

  if (replace_string(opt," ","") == "")
    BAIL("No question specified.\n");

  questions += ({opt});

  trivia_line(""+(currentq+1)+". "+opt+"");

  return 1;
}


int triv_a(string opt) {

  string who, ans;

  if (!playing)
    BAIL("The game has not been started.\n");

  if (replace_string(opt," ","") == "")
    BAIL("No player specified.\n");

  if (sscanf(opt, "%s %s", who, ans) < 2)
    BAIL("No answer specified.\n");

  who=lower_case(who);
  
  if (who != "none" && member_array(who,keys(players)) == -1)
    BAIL("Player "+capitalize(who)+" was not registered at start.\n");

  if (sizeof(questions) <= sizeof(answered))
    BAIL("There is no question to answer yet.\n");

  answered += ({who+" "+ans});
  if (who != "none") players[who]=players[who]+1;
  currentq++;

  if (who == "none")
    trivia_line("The answer was: "+ans+"");
  else
    trivia_line("Correct, "+capitalize(who)+": "+ans+"");

  return 1;
}


int triv_dispute(string opt) {

  string last_who, last_question, last_answer;
  
  if (!playing)
    BAIL("The game has not been started.\n");

  if (sscanf(answered[<1..<1][0],"%s %s", last_who, last_answer) != 2)
    BAIL("The last answer was not found, this is a bug.\n");

  if (!(last_question=questions[<1..<1][0]))
    BAIL("The last question was not found, this is a bug.\n");

  if (!opt || opt == "")
    opt="none";

  write_file(DISPUTE_FILE,
    "Question: "+last_question+"\n"+
    "Answer from "+capitalize(last_who)+": "+last_answer+"\n"+
    "Notes: "+opt+"\n\n");

  players[last_who]=players[last_who]-1;

  trivia_line("Dispute over previous answer, point removed from "+capitalize(last_who)+".");

  return 1;
}


int triv_status(string opt) {

  string blah;
  string *k;
  int i;

  if (!playing)
    BAIL("The game has not been started.\n");

  if (opt == TRIVIA_END) {
    blah="Final stats: ";
    blah+=""+currentq+" question"+(currentq==1?"":"s")+", ";
  }
  else {
    blah="Game stats: ";
    blah+=""+currentq+" question"+(currentq==1?"":"s")+" so far, ";
  }
  blah+="Scores: ";

  k=keys(players);
  k=sort_array(k,"sort_scores");

    blah+=capitalize(k[0])+" - "+players[k[0]];
  for (i=1;i<sizeof(k);i++)
    blah+=", "+capitalize(k[i])+" - "+players[k[i]];
  
  trivia_line(""+blah+"");

  return 1;
}


int triv_end(string opt) {

  if (!playing)
    BAIL("The game has not been started.\n");

  trivia_line("The game has ended.");

  do_end();
  
  return 1;
}


void do_end() {

  triv_status(TRIVIA_END);

  clear_vars();

}


int sort_scores(string str1, string str2) {
  if (players[str1] < players[str2]) return 1;
  else if (players[str1] > players[str2]) return -1;
  else return 0;
}


void trivia_line(string str) {
  CHAT_D->do_chat("trivia", "%^BOLD%^"+str+"%^RESET%^");
}
 
