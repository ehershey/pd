// Monopoly game -- seeker
#include <std.h>
inherit OBJECT;
/* Only use 6 and under,, if you go over the players peices will go
off the board, and bad things could happen */

#define game_peices ({ "shoe", "boat", "car", "dog", "cannon",\
                       "horse", "wheel-barrel", "thimble" })
#define max_players sizeof(game_peices)

mapping players;

static void create()
{
 set_name("board");
 set_short("A Monopoly game board");
 set_long("The game board has many squares on it for which you can "
          "play Monopoly on. It has many game peices on it. There are "
          "two stacks of cards on the board. One labeled Community Chest, "
          "and the other Chance.");
 set_id( ({ "board", "monopoly", "monopoly board" }) );
 set_weight(10);
 players = ([]);
 
}

int query_auto_load() { return 1; }

void init()
{
 ::init();
 add_action("enter_game", "join");
 add_action("show_board", "show");
}

string *query_place(int num)
{
 int i;
 string *ob;
 string *key;

 ob = ({});
 i = sizeof(players);
 key = keys(players);
 while(i--)
  {
   if (num == players[ key[i] ]["place"]) ob += ({capitalize(players[key[i]]["peice"]) });
  }
 return ob;
}
int show_board(string str)
{ 
 int i, a, b, v;
 string *board;
 string *ob, next;
 int s;
 if (!str || str =="" || str!="board") return notify_fail("Show what?\n");
board = ({
"_______________________________________________________________",
"|free        |                                   | go to      |",
"|parking     |                                   | jail       |",
"|            |___ ___ ___ ___ ___ ___ ___ ___ ___|            |",
"|            |   |   |   |   |   |   |   |   |   |            |",
"|------------+-----------------------------------+------------|",
"|         |  |   _________                       |  |         |",
"|         |  |  [community]                      |  |         |",
"|         |  |  [  chest  ]                      |  |         |",
"|         |  |  [_________]                      |  |         |",
"|         |  |                  __________       |  |         |",
"|         |  |                 [  chance  ]      |  |         |",
"|         |  |                 [          ]      |  |         |",
"|         |  |                 [__________]      |  |         |",
"|         |  |                                   |  |         |",
"|------------+-----------------------------------+------------|",
"|jail        |___|___|___|___|___|___|___|___|___|     GO     |",
"|            |                                   |  <-------  |",
"|visiting    |                                   |            |",
"|-------------------------------------------------------------|" });
 write("You look over the game board:");
 i = sizeof(board);
 for (a=0; a<i; a++)
    {
     
     if (a == 18)
       { 
          ob = query_place(3);
        s = sizeof(ob);
        b = 42;
        v=0;
        while(s--)
         {
          if (b > 44) b = 42;
          if (v < 3)
            { v++; board[a-1][b] = ob[s][0]; }
           else
            board[a][b] = ob[s][0];
          b++;
         }

        ob = query_place(2);
        s = sizeof(ob);
        b = 46;
        v=0;
        while(s--)
         { 
          if (b > 48) b = 46;
          if (v < 3) 
            { v++; board[a-1][b] = ob[s][0]; }
           else
            board[a][b] = ob[s][0];
          b++;
         }

        ob = query_place(1);       
        s = sizeof(ob);
        b = 52;
        while(s--)
         {
          board[a][b] = ob[s][0];
          b++;
         }
       }
  
    board[a] = replace_string(board[a], "T", "%^WHITE%^%^BOLD%^T%^RESET%^");
    }
 for (a=0; a<i; a++)
    write(board[a]);
 return 1;
}
void say_monopoly(string str)
{
 int i;
 
 message("info", "%^CYAN%^<monopoly>%^RESET%^ "+str, keys(players));
}
object query_peice(string peice)
{
 int i;
 string *key;

 i = sizeof(players);
 key = keys(players);
 while(i--)
  {
   if (players[ key[i] ]["peice"] == peice) return (object)key[i];
  }
}

int enter_game(string str)
{
 string peice;

 if (sizeof(players) > max_players)
   return notify_fail("Theres already a max of "+sizeof(players)+" in the game.\n");
 if (!str || str == "")
   return notify_fail("Join as what game peice?\n");
 if (sscanf(str, "as %s", peice)!=1)
   return notify_fail("Join as what game peice?\n");
 if (member_array(peice, game_peices)==-1)
   return notify_fail("That is not a valid game peice.\n");
 if (query_peice(peice))
   return notify_fail("Somebody is already a "+capitalize(peice)+"\n"); 
 if (players[this_player()])
   return notify_fail("You are already playing a game of monopoly.\n");
 players[this_player()] = ([ "peice" : peice, "place" : 3 ]);
 write("You join the game of monopoly as the "+capitalize(peice)+".");
 say_monopoly(this_player()->query_cap_name()+" joins the game as the "+capitalize(peice)+".");
 return 1;
}
