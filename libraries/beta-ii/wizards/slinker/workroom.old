#include <std.h>
inherit ROOM;
int findHall(string str);

string *boards = ({
"forge_ideas",
"newbie",
"main_board",
"immortal",
"planning",
"arch",
"law",
"coding",
"ombud",
"kataan_board",
"rogue_board",
"monk_board",
"mage_board",
"cleric_board",
"antipaladin",
"paladin",
"ranger",
"soldier",
"warrior",
"knight",
"conj",
"druid",
"necro", 
"pyro",
"sorc",
"wizard",
"jester",
"theif",
"assassin",
"monk_dark",
"monk_light",
"spell",
"lodos_town",
});
int x = 0;
object ob;

void create() {
    object ob;    
 ::create();
   set_properties( ([ "light" : 2, "indoors" : 1]) );
   set_short("ahhh");
   set_long("A small cozy workroom.");
   set_smell("default", "The smell of heavy work reaches you");
   set_listen("default", "You hear non-stop typing");
   set_exits( ([ 
        "forest" : "/d/standard/rain_forest/dirt3.c",
        "square" :  "/d/standard/square"
    ]) );
    ob = new("std/bboard");
    ob->set_name("board");
    ob->set_id( ({ "board", "spell board" }) );
    ob->set_board_id("slinker");
    ob->set_max_posts(50);
    ob->set_location("/wizards/slinker/workroom.c");
    ob->set("short", "Slinker's board");
    ob->set("long", "Slinker's board for anything that is needed.\n");
    
}
int next() {
   int i, read, total, diff;

   diff = 0;
  while(!diff) {
   i = x + 1;
   if (i >= sizeof(boards)) {
     x = 0;
     write("%^YELLOW%^You are now reading: %^RESET%^forge_ideas%^YELLOW%^
"
       "by default.");
     tell_room(environment(this_player()), "%^YELLOW%^The board is now set
to: "
       "%^RESET%^forge_ideas%^YELLOW%^ by default.", ({ this_player() }));
     diff = BBOARD_D->get_num_read(boards[x],
this_player()->query_name());
     diff -= BBOARD_D->get_num_posts(boards[x]);
     break;
   }
   else x++;
   if (!total = (int)BBOARD_D->get_num_posts(boards[x])) continue;
   read = (int)BBOARD_D->get_num_read(boards[x],
this_player()->query_name());
   diff = total - read;
   if (read == total) continue;
   if (total == 0) continue;
  }
   write("%^YELLOW%^You are now reading:%^RESET%^
"+boards[x]+" ("+(string)diff$
   tell_room(environment(this_player()),
      "%^YELLOW%^The board is now set to: %^RESET%^"+boards[x]+".",
      ({ this_player() }));
   ob->set_board_id(boards[x]);
   return 1;
}
int back() {
   write("%^YELLOW%^You are now reading:%^RESET%^ forge_ideas.");
   tell_room(environment(this_object()),
      "%^YELLOW%^The board is now set to:%^RESET%^ forge_ideas.");
   ob->set_board_id("forge_ideas");
   x = 0;
   return 1;
}

void reset() {
   ::reset();
   new("/wizards/inferno/keg.c")->move(this_object());
   new("/wizards/slinker/guard.c")->move(this_object());
 }
void query_access() {
   if (!access) write("Slinker is the only one allowed");
   else write("All others allowed.");
}

int set_access(int i) {
   if (this_player()->query_name() != "slinker") {
      write("Access denied.");
      return 1;
   }
   access = i;
}

mixed init() {
  ::init();
    if(this_player()->query_name() != "slinker" && !access)
{
      write("Access denied.");
      this_player()->move("/d/standard/square");
      return 1;
   }
   if (!access) {
      access = 1;
      write("All others now allowed.");
      return 1;
   }
   add_action("toggle", "toggle");
   add_action("ready", "ready");
   add_action("findHall", "hall");
}


int findHall(string str) {
   if (!str) {
      write("Syntax: <hall [class_hall]> : class_hall must be in sindarii");
      return 1;
   }
   this_player()->move_player("/d/standard/"+str+"_hall", str);
   return 1;
}
int ready() {
   if (this_player()->query_name() !="slinker") return 0;
   write("You get your tyte rayban's");
   new("/wizards/slinker/rayban")->move(this_player());
   new("/wizards/slinker/ointment.c")->move(this_player());
   new("/wizards/slinker/ass.c")->move(this_player());
   return 1;
}
