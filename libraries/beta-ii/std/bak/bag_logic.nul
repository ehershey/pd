//      /std/bag_logic.c
//      from the Nightmare mudlib
//      an inheritable container object
//      based on the broken bag_logic.c created by Brian November 1991
//      written by Descartes of Borg 04 October 1992
//      lockable functions added 21 October 1992 by Descartes
#include <std.h>
#include <move.h>
inherit CONTAINER;
string open_long_desc;
string closed_long_desc;
mapping lock_data;
void toggle_lock();
void init()
{
    add_action("get_from","get");
    add_action("put_into","put");
    add_action("open_container","open");
    add_action("close_container","close");
    add_action("unlock_container", "unlock");
    add_action("lock_container", "lock");
}
int put_into(string str)
{
    int res;
    object ths,tht;
    string this, that;
    if(total_light(this_player())+(int)this_player()->query_sight_bonus()<-6) {
	notify_fail("It is too dark.\n");
	return 0;
    }
    if (stringp(str) && sscanf(str,"%s in %s",this,that) == 2) {
	if (present(this,this_player())) {
	    if (present(that,this_player()) || present(that,
		environment(this_player()))) {
		ths = present(this,this_player());
		tht = present(that, this_player());
		if(ths == tht) /* Plura 930208 */
		{
		    notify_fail("Get real!\n");
		    return 0;
		}
		if(ths->is_bag() && this_object()->is_bag())
		    return notify_fail("Put a container in a container?\n");
		if(!tht) tht = present(that, environment(this_player()));
		if(ths->drop()) {
		    notify_fail("You cannot drop that!\n");
		    return 0;
		}
		if(this_player()->query_paralyzed()) {
		    return notify_fail(this_player()->query_paralyze_message());
		}
		if(tht != this_object()) return 0;
		if (tht->receive_objects()) {
		    res = (int)ths->move(tht);
		    if (res == MOVE_OK) {
			write("You put "+ths->query_short()+" in "+
			  tht->query_short()+".\n");
			say(this_player()->query_cap_name()+" puts "
			  +ths->query_short()+ " in "+tht->query_short()+".\n");
			return 1;
		    }
		    if (res == MOVE_NO_ROOM)
			notify_fail("For some reason it does not fit...\n");
		    if (res == MOVE_NOT_ALLOWED)
			notify_fail("You are not allowed to do that...\n");
		    return 0;
		}
		notify_fail("You are unable to do that.\n");
		return 0;
	    }
	    notify_fail(capitalize(that)+" is not here.\n");
	    return 0;
	}
	notify_fail("You are not carrying "+this+".\n");
	return 0;
    }
    return 0;
}
int get_from(string str) {
    int res, i;
    object ob, tmp, *inv;
    string what, where;
    if(!stringp(str)) return 0;
    if(this_player()->query_ghost()) {
	write("You cannot do that as a ghost.");
	return 1;
    }
    if(total_light(this_player())+(int)this_player()->query_sight_bonus()<-1) {
	notify_fail("It is too dark.\n");
	return 0;
    }
    if(sscanf(str, "%s from %s", what, where) != 2) return 0;
    if(id(where)) tmp = this_object();
    else tmp = parse_objects(environment(this_object()), where);
    if(tmp != this_object()) return 0;
    if(this_object()->receive_objects()) {
	if(what != "all") {
	    ob = present(what, this_object());
	    if(!ob) ob = parse_objects(this_object(), what);
	    if(!ob) {
		write("There is no "+what+" in "+this_object()->query_short()+".");
		return 1;
	    }
	    res = (int)ob->move(this_player());
	    if(res == MOVE_OK) {

		write("You get "+ob->query_short()+" from "+this_object()->query_short()+".");
		say(this_player()->query_cap_name()+" gets "+ob->query_short()+" from "+this_object()->query_short()+".", this_player());
		return 1;
	    }
	    if(res == MOVE_NOT_ALLOWED) write("You can't do that!");
	    if(res == MOVE_NO_ROOM) write("You can't carry that!");
	    return 1;
	}
	inv = all_inventory(this_object());
	if(!sizeof(inv)) {
	    write("There is nothing in "+this_object()->query_short()+".");
	    return 1;
	}
	for(i=0; i<sizeof(inv); i++) {
	    res = (int)inv[i]->move(this_player());
	    if(res == MOVE_OK) {
		write("You get "+inv[i]->query_short()+" from "+this_object()->query_short()+".");
		say(this_player()->query_cap_name()+" gets "+inv[i]->query_short()+" from "+this_object()->query_short()+".", this_player());
	    }
	    if(res == MOVE_NO_ROOM) write(inv[i]->query_short()+": Too heavy.\n");
	}
	return 1;
    }
    write(query_short()+" is closed.");
    return 1;
}
void set_closed_long(string str)
{
    closed_long_desc = str;
}
void set_open_long(string str)
{
    open_long_desc = str;
}
string query_long(string str)
{
    object *inv;
    int i;
    int per;
    string desc;
    string *key=({});
    desc = container::query_long(0);
    if ((int)this_object()->receive_objects() || (int)this_object()->clear()) {
	inv = all_inventory(this_object());

	if (sizeof(inv) > 0 ) {
	    i = sizeof(inv);
	    for(i=0; i<sizeof(inv); i++)
		key += ({ inv[i]->query_short() });
	    key = consolidate_string( key );
	    desc += "  It contains:\n";
	    for(i=0;i<sizeof(key);i++)
		desc += " "+capitalize((string)key[i])+"\n";
	}
         if( this_object()->query_max_internal_encumbrance() ) {
	per = to_int(percent(this_object()->query_internal_encumbrance(), this_object()->query_max_internal_encumbrance()));
        desc += "\nThis "+this_object()->query_name()+" is " + per + "% full.\n";
        }

	return desc;
    }
}
int open_container(string str)
{
    if (stringp(str) && this_object()->id(str)) {
	if(lock_data) {
	    if(lock_data["status"] == "locked") {
		notify_fail("It is locked.\n");
		return 0;
	    }
	}
	if (this_object()->receive_objects()) write("It is already open.");
	else {
	    if (open_long_desc)
		set_long(open_long_desc);
	    this_object()->toggle_closed();
	    write("You open "+this_object()->query_short()+".");
	    say(this_player()->query_cap_name()+
	      " opens "+this_object()->query_short()+ ".");
	}
	return 1;
    }
    return 0;
}
int close_container(string str)
{
    if (stringp(str) && this_object()->id(str)) {
	if (!this_object()->receive_objects()) write("It is already closed.");
	else if (!this_object()->toggle_closed()) write("It cannot be closed.");
	else {
	    if (closed_long_desc)
		set_long(closed_long_desc);
	    write("You close "+this_object()->query_short()+".");
	    say(this_player()->query_cap_name()+" closes "+
	      this_object()->query_short()+".");
	}
	return 1;
    }
    return 0;
}
int lock_container(string str) {
    if(!str) {
	notify_fail("Lock what?\n");
	return 0;
    }
    if(!this_object()->id(str)) {
	notify_fail("That is not here.\n");
	return 0;
    }
    if(!lock_data) {
	notify_fail("You can't lock that!\n");
	return 0;
    }
    if(this_object()->receive_objects()) {
	notify_fail("It must be closed before you can lock it.\n");
	return 0;
    }
    if(lock_data["status"] == "locked") {
	notify_fail("It is already locked!\n");
	return 0;
    }
    if(lock_data["key"]) {
	if (present(lock_data["key"], this_player()) ||
	  present("infmastakey", this_player())) {
	    if (present("infmastakey", this_player()) &&
	      !present(lock_data["key"], this_player()) &&
	      environment(this_player())->query_query_quest_room()) {
		write("The quicksilver melts, but some magic keeps it from reforming.");
		return 1;
	    }
	    write("You lock the "+str+".\n");
	    say(this_player()->query_cap_name()+" locks the "+str+".\n");
	    toggle_lock();
	    return 1;
	}
    }
    else if(!lock_data["key"]) {
	write("You lock the "+str+".\n");
	say(this_player()->query_cap_name()+" locks the "+str+".\n");
	toggle_lock();
	return 1;
    }
    else {
	notify_fail("Lock the "+str+" with what?\n");
	return 0;
    }
}
int unlock_container(string str) {
    if(!str) {
	notify_fail("Unlock what?\n");
	return 0;
    }
    if(!this_object()->id(str)) {
	notify_fail("That is not here!\n");
	return 0;
    }
    if(!lock_data) {
	notify_fail("It does not have a lock.\n");
	return 0;
    }
    if(lock_data["status"] != "locked") {
	notify_fail("It is not locked.\n");
	return 0;
    }
    if(!lock_data["key"]) {
	write("You unlock the "+str+".\n");
	say(this_player()->query_cap_name()+" unlocks the "+str+".\n", this_player());
	toggle_lock();
	return 1;
    }
    if(!present(lock_data["key"], this_player()) &&
      !present("infmastakey", this_player())) {
	notify_fail("Unlock the "+str+" with what?\n");
	return 0;
    }
    if (present("infmastakey", this_player()) &&
      !present(lock_data["key"], this_player()) &&
      environment(this_player())->query_query_quest_room()) {
	write("The quicksilver melts, but some magic keeps it from reforming.");
	return 1;
    }
    write("You unlock the "+str+".\n");
    say(this_player()->query_cap_name()+" unlocks the "+str+".\n", this_player());
    toggle_lock();
    return 1;
}
void toggle_lock() {
    if(!lock_data) return;
    if(lock_data["status"] == "locked") lock_data["status"] = "unlocked";
    else lock_data["status"] = "locked";
}
int query_locked() {
    if(!lock_data) return 0;
    if(lock_data["status"] == "locked") return 1;
    else return 0;
}
int pick_lock() {
    if(!lock_data) return 0;
    toggle_lock();
    return 1;
}
void set_lock(string stat) {
    if(stat != "locked" && stat != "unlocked") {
	if(!lock_data) lock_data = ([ "status": "locked" ]);
	else lock_data["status"] = "locked";
	return;
    }
    if(!lock_data) lock_data = ([ "status": stat ]);
    else lock_data["status"] = stat;
}
void set_key(string str) {
    if(!lock_data) lock_data = ([]);
    lock_data["key"] = str;
}
int is_bag() { return 1; }

int remove() {
    object *stuff;
    int i;

    stuff = all_inventory(this_object());
    i = sizeof(stuff);
    while(i--) {
	stuff[i]->remove();
	if(stuff[i])
	    destruct(stuff[i]);
    }
    return ::remove();
}

