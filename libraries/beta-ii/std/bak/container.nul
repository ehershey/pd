//	/std/container.c
//	from the Nightmare mudlib
//	code inherited by all items which can hold things
//	created by Sulam@TMI for the TMI mudlib distribution
//	13 january 1992
// Bug with invisible objects fixed by Pallando 93-07-14

#include <std.h>

inherit OBJECT;
#define MAG "%^MAGENTA%^%^BOLD%^"
private static int internal_encumbrance;
private static int possible_to_close;
private static int is_closed;
private static int max_internal_encumbrance;

void set_max_internal_encumbrance(int max);
int query_max_internal_encumbrance();
int query_internal_encumbrance();
int receive_objects();
int add_encumbrance(int enc);

// Implement an object that can contain things.
// The 'remove()' function is implemented by the move.c object
// and will take care of any objects inside this object.

void set_max_internal_encumbrance(int max) {
    max_internal_encumbrance = max;
}

void set_possible_to_close(int pos) {
    possible_to_close = pos;
}

int query_internal_encumbrance() {
    return internal_encumbrance;
}

int query_max_internal_encumbrance() {
    return max_internal_encumbrance;
}

int toggle_closed() {
    if (possible_to_close) {
      if (is_closed) is_closed = 0;
      else is_closed = 1;
      return 1;
    }
    else return 0;
}

// This function is called from move()

int receive_objects() {
    if (is_closed) return 0;
    return 1;
}
int set_internal_encumbrance(int x)
{
 internal_encumbrance = x;
}
int add_encumbrance(int enc) {
/* Code added by Whit to prevent autoload bug.
 * In setup is set when a player is called
 * setup();
 */
   if (this_object()->in_setup()) {
     internal_encumbrance += enc;
     return 1;
   }
    if( !max_internal_encumbrance ) return 1;
    if( enc + internal_encumbrance > max_internal_encumbrance ) return 0;
    internal_encumbrance += enc;
    return 1;
}

string describe_living_contents(object *exclude) {
    object *inv;
    mapping list;
    string *shorts=({});
    string tmp, ret;
    int i, x;

    i = sizeof(inv = filter_array(all_inventory(this_object())-exclude,
      "filter_living", this_object()));
    if(!i) return "";
    list = ([]);
    while(i--) {
        if (inv[i]->query_invis()) continue;
        if(!(tmp = (string)inv[i]->query_short())) {
          continue;
        }
       if (inv[i]->query_disquised_short()!=""&&
           inv[i]->query_disquised_short()) 
          tmp = (string)inv[i]->query_disquised_short();
                 
        if(!tmp); else
        if(!list[tmp]) list[tmp] = ({ inv[i] });
        else list[tmp] += ({ inv[i] });
        if (member_array(tmp, shorts)==-1) shorts += ({ tmp });
    }
    i = sizeof(shorts);
    ret = "";
    while(i--) {
        if((x=sizeof(list[shorts[i]])) < 2) ret += "%^RED%^%^BOLD%^"+shorts[i]+"%^RESET%^%^RED%^%^BOLD%^";
        else ret += "%^RED%^%^BOLD%^"+capitalize(consolidate(x, shorts[i]))+"%^RESET%^%^RED%^%^BOLD%^";
       ret += "\n";
    }
    return ret;
}

string describe_item_contents(object *exclude) {
    object *inv;
    mapping list;
    string ret, tmp;
    string *shorts=({});
    int i, x;

    i = sizeof(inv = filter_array((all_inventory(this_object())-exclude),
      "filter_non_living", this_object()));
    if(!i) return "";
    list = ([]);
    while(i--) {
        if(!(tmp = (string)inv[i]->query_short())) continue;
        if(tmp == "") continue;
        if(!list[tmp]) list[tmp] = ({ inv[i] });
        else list[tmp] += ({inv[i] });
        if (member_array(tmp, shorts)==-1) shorts += ({ tmp });
    }
    i = sizeof(shorts);
    if(!i) return "";
    if((x=sizeof(list[shorts[--i]])) == 1)
      ret = MAG+capitalize(shorts[i]);
    else ret = MAG+capitalize(consolidate(x, shorts[i]));
    if(!i) return (x <2 ? ret+" "+MAG+"is here.\n" : ret + MAG+" are here.\n");
    else if(i==1)
      return ret+MAG+" and "+consolidate(sizeof(list[shorts[0]]),shorts[0])+
        MAG+" are here.\n";
    else {
        while(i--) {
            if(!i) ret += MAG+", and ";
            else ret += MAG+", ";
            ret += consolidate(sizeof(list[shorts[i]]), shorts[i]);
        }
    }
    return ret+MAG+" are here.";
}

int filter_living(object ob) { return living(ob); }

int filter_non_living(object ob) { return !living(ob); }
