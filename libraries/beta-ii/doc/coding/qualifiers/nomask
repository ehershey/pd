=============================================================================

Functions that are declared as nomask can not be masked by inheritance. 
That is to say, a child object may not declare another function with the 
same name. Normally a function with the same name in a child object would 
simply replace the original function silently (called masking it). A 
function marked nomask may not be replaced in this way. Attempting to do 
so gives an error message. 

Since an internal call will still use the child class's method definition 
by default, nomask functions provide a way to be sure what method is being 
called. Functions that are declared as both static and nomask are a powerful 
way to make sure a function can be called only by child classes, but the 
definition of the function will always be known for any child class. 
A private function may not also be declared nomask. 

Variables may not be marked nomask -- they have the same functionality 
automatically, so there is no use for a nomask variable modifier.

==============================================================================

Ironman
