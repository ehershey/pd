
This tutorial is geared to outline the functions contained in
the MONSTER inherit. All of the functions outlined in %^BLACK%^%^BOLD%^help objects%^RESET%^
still apply in the MONSTER inherit.

%^GREEN%^%^BOLD%^set_id( ({%^BLACK%^%^BOLD%^ <array of strings for ID's>%^GREEN%^%^BOLD%^ }) );
%^GREEN%^%^BOLD%^set_name(%^BLACK%^%^BOLD%^ <string for Monster's name>%^GREEN%^%^BOLD%^);
%^GREEN%^%^BOLD%^set_stort(%^BLACK%^%^BOLD%^ <string for Monster's short description>%^GREEN%^%^BOLD%^);
%^GREEN%^%^BOLD%^set_long(%^BLACK%^%^BOLD%^ <string for Monster's long description>%^GREEN%^%^BOLD%^);
%^GREEN%^%^BOLD%^set_weight(%^BLACK%^%^BOLD%^ <integer for Monster's weight>%^GREEN%^%^BOLD%^);
%^GREEN%^%^BOLD%^set_value(%^BLACK%^%^BOLD%^ <integer for Monster's value>%^GREEN%^%^BOLD%^);

All of the above functions must be set for your weapons, save for the value.
The value is assumed by the system to be UNDEFINED, which means you weapon
is unsellable. The specifics of the above functions are all explained in
%^BLACK%^%^BOLD%^help objects%^RESET%^ tutorial.

The following things are specific to your weapon;

%^GREEN%^%^BOLD%^set_ac(%^BLACK%^%^BOLD%^<integer for the Weapon's AC>%^GREEN%^%^BOLD%^);
%^RED%^%^BOLD%^EXAMPLE :: %^GREEN%^%^BOLD%^set_ac(2);
This will give the weapon a value representing the level of protection
it affords the limbs in which it is being wielded. Primal Darkness has
the value for AC and WC defined in %^BLACK%^%^BOLD%^help balwep%^RESET%^. In general,
anything you want to add to AC for the weapond SUBTACT from the weapon's
defined value from %^BLACK%^%^BOLD%^help balarm%^RESET%^ for WC. This will keep the
weapon's power levels fairly within balance.

%^GREEN%^%^BOLD%^set_wc(%^BLACK%^%^BOLD%^<integer for the Weapon's WC>%^GREEN%^%^BOLD%^);
%^RED%^%^BOLD%^EXAMPLE :: %^GREEN%^%^BOLD%^set_wc(10);
This will give the weapon a value representing the quality of the weapon.
Again see %^BLACK%^%^BOLD%^help balarm%^RESET%^ for specific weapon class ranges.

%^GREEN%^%^BOLD%^set_type(%^BLACK%^%^BOLD%^<string the type of Weapon>%^GREEN%^%^BOLD%^);
%^RED%^%^BOLD%^EXAMPLE :: %^GREEN%^%^BOLD%^set_type("blade");

This function tells the mud what type of weapon you want the object to be.
The types of weapons are listed in %^BLACK%^%^BOLD%^help balwep%^RESET%^.
===========================================================================

%^CYAN%^%^BOLD%^Optional functions you may include in your weapons.

%^GREEN%^%^BOLD%^set("read",%^BLACK%^%^BOLD%^<string show when the weapon is read OR a function that is executed when read >%^GREEN%^%^BOLD%^);
    This function will allow you to set up a string for when someone tries
    to read your weapon. You may also define a custom function instead of
    the string.
%^RED%^%^BOLD%^EXAMPLE%^RESET%^ :: %^GREEN%^%^BOLD%^set("read","The staff of Wizardly Knowledge");
%^RED%^%^BOLD%^EXAMPLE%^RESET%^ :: %^GREEN%^%^BOLD%^set("read", (: weapon_read :) );

         The first example is for a string to be returned. The second one will
         execute a custom function you have defined in your weapon when someone
         attempts to read your weapon. Please see the *coding topic in the help
         system for specifics on making your own functions.

%^GREEN%^%^BOLD%^set_decay_rate(%^BLACK%^%^BOLD%^<integer which defines how many hits the weapon can take>%^GREEN%^%^BOLD%^);
%^RED%^%^BOLD%^EXAMPLE%^RESET%^ :: %^GREEN%^%^BOLD%^set_decay_rate(100);
Sets how many hits a weapon can make before decaying one degree in quality.
You should see the %^BLACK%^%^BOLD%^help balwep%^RESET%^ for decay rate ranges.

%^GREEN%^%^BOLD%^set_wield(%^BLACK%^%^BOLD%^<string to be show or function to be used when weapon is wielded>%^GREEN%^%^BOLD%^);
%^RED%^%^BOLD%^EXAMPLE%^RESET%^ :: %^GREEN%^%^BOLD%^set_wield("You feel the power of the blade when you wield it");
%^RED%^%^BOLD%^EXAMPLE%^RESET%^ :: %^GREEN%^%^BOLD%^set_wield( (: extra_wield :) );

%^GREEN%^%^BOLD%^set_hit(%^BLACK%^%^BOLD%^<string shown or function called when the weapon hits something>%^GREEN%^%^BOLD%^);
%^RED%^%^BOLD%^EXAMPLE%^RESET%^ :: %^GREEN%^%^BOLD%^set_hit("The iceblade sings as it hits.");
%^RED%^%^BOLD%^EXAMPLE%^RESET%^ :: %^GREEN%^%^BOLD%^set_hit( (: extra_hit :) );

%^GREEN%^%^BOLD%^set_unwield(%^BLACK%^%^BOLD%^<string shown or function called when the weapon is unwielded>%^GREEN%^%^BOLD%^);
%^RED%^%^BOLD%^EXAMPLE%^RESET%^ :: %^GREEN%^%^BOLD%^set_unwield("The iceblade shatters as you remove it.");
%^RED%^%^BOLD%^EXAMPLE%^RESET%^ :: %^GREEN%^%^BOLD%^set_unwield( (: extra_unwield :) );
The three preceeding functions; %^GREEN%^%^BOLD%^set_wield()%^RESET%^, %^GREEN%^%^BOLD%^set_unwield()%^RESET%^ and %^GREEN%^%^BOLD%^set_hit()%^RESET%^; ALL
can take advantage of custom functions. You may also opt to just pass a
message in the form of a string instead. I explain how to make custom functions
in the *coding section of the help system. Please refer there for more info or
ask the Current Archwizard in charge of Training for instructions.

%^GREEN%^%^BOLD%^set_skill(%^BLACK%^%^BOLD%^<string for skill's name>%^GREEN%^%^BOLD%^,%^BLACK%^%^BOLD%^<Integer for the value of the Skill>%^GREEN%^%^BOLD%^);
%^RED%^%^BOLD%^EXAMPLE%^RESET%^ :: %^GREEN%^%^BOLD%^set_skill("defense",200);
Makes it so that only a person with a skill in the weapon's weapon type
above what you set may wield the weapon.

%^GREEN%^%^BOLD%^add_poisoning(%^BLACK%^%^BOLD%^<Integer for the amount of poison>%^GREEN%^%^BOLD%^);
%^RED%^%^BOLD%^EXAMPLE%^RESET%^ :: %^GREEN%^%^BOLD%^add_poisoning(10);
Makes the weapon a poison weapon capable of poisoning opponents.

=============================================================================

Signed,

Ironman, The absent-minded Professor

