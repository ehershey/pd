Data types have two main uses. The first is for variables. The second is for functions. The data type of variables refers to the what kind of information it can hold. The data type for functions refers to the type of information the function will return when and object calls it.

VOID -----

This Data type only holds one thing and one thing only. A zero.
It is mainly used ONLY for functions and is rarely used for a variable.

INT ----

This Data type is used to store whole numbers. If you try storing
decimals, they will be rounded off to a whole number.

FLOAT --

This Data type is for decimals. It is not usually used however because
repeating decimals like Pi clogs the muds memory. Use int instead
whenever humanly possible.

STRING --- uses " " around them

This Data type is for strings of characters. It can store any ancii value.
The standard %^ codes all work INSIDE of a string. Some characters
such as a " , \ / % ^ ( { [ ] } ) sometimes have funky responses inside
of strings. If this happens and the line returns a syntax error, then you
plant a \ infront of it.

EXAMPLE ---- "The shield of \"BOB\" is shiny"
returns >>> The shield of "BOB" is shiny

OBJECT ---

This data type is used to point at object types. Samples of this are users,
monsters, rooms, armors, weapons, etc, etc, etc. Even commands are
considered "objects" by the LPC master.c

FUNCTION --- users (: :) around them

For the most part, This data type is rarely used unless your messing
with commands or mudlib files. It will store a function pointer.

MIXED ---

This data type can store ALL of the other types of data. Anything can go
into this type. It is to be avoided however unless you WANT several types
of data to be able to get stored in the data pointer.

==================================================
These four data types i will talk about in detail in their own coding files.
I'm merely introducing them here.
==================================================

ARRAYS ---- uses ({ }) around them

ANY data type can become an array. Arrays are used to store multiple
entries of a give data type in a single data pointer. You then INDEX the
information off the array as needed. I will explain indexing in the coding file
about Arrays. 

BUFFER --- uses ({ }) around them

This is a rarely used data type. It is basically a string array and functions
the same way as one. I'm not gonna bother detailing this type unless i'm
asked about it

MAPPING -- uses ([ ]) around them

This data type is by far the most POWERFUL indexing tool in the C++ or
LPC languages. It would take me about 10 pages to explain it so i won't
do it here. Please see the coding file about mappings for details.

CLASS ----

This data type is used to DEFINE data types. It is VERY rare that you would
see or use the class type in LPC coding but it does exist. I won't get into
details unless asked about it. 
